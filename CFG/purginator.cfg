;██████╗ ██╗   ██╗██████╗  ██████╗ ██╗███╗   ██╗ █████╗ ████████╗ ██████╗ ██████╗     ██████╗███████╗ ██████╗ 
;██╔══██╗██║   ██║██╔══██╗██╔════╝ ██║████╗  ██║██╔══██╗╚══██╔══╝██╔═══██╗██╔══██╗   ██╔════╝██╔════╝██╔════╝ 
;██████╔╝██║   ██║██████╔╝██║  ███╗██║██╔██╗ ██║███████║   ██║   ██║   ██║██████╔╝   ██║     █████╗  ██║  ███╗
;██╔═══╝ ██║   ██║██╔══██╗██║   ██║██║██║╚██╗██║██╔══██║   ██║   ██║   ██║██╔══██╗   ██║     ██╔══╝  ██║   ██║
;██║     ╚██████╔╝██║  ██║╚██████╔╝██║██║ ╚████║██║  ██║   ██║   ╚██████╔╝██║  ██║██╗╚██████╗██║     ╚██████╔╝
;╚═╝      ╚═════╝ ╚═╝  ╚═╝ ╚═════╝ ╚═╝╚═╝  ╚═══╝╚═╝  ╚═╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚═╝ ╚═════╝╚═╝      ╚═════╝ 
;
; Version 1.1 2024-09-10
;
; This file contains all macros necessary to make use of the Purginator mod (github.com/weuzor/purginator)
; Bear in mind that these macros were written by a person with only rudimentary knowledge in this area and are
; mostly the product of peeking into the happy hare macros by moggieuk and the blobifier.cfg by Dendrowen, 
; googeling and a lot of tries and even more errors, so general caution is advised if you plan to use them.


## Include Variables and Hardware Config 
[include purginator_vars.cfg]
[include purginator_hw.cfg]


;   _____ ___   ___              ____   _____ _        _____       _                       _   _             
;  / ____|__ \ / _ \    ___     / __ \ / ____| |      |_   _|     | |                     | | (_)            
; | |  __   ) | (_) |  ( _ )   | |  | | |  __| |        | |  _ __ | |_ ___  __ _ _ __ __ _| |_ _  ___  _ __  
; | | |_ | / / > _ <   / _ \/\ | |  | | | |_ | |        | | | '_ \| __/ _ \/ _` | '__/ _` | __| |/ _ \| '_ \ 
; | |__| |/ /_| (_) | | (_>  < | |__| | |__| | |____   _| |_| | | | ||  __/ (_| | | | (_| | |_| | (_) | | | |
;  \_____|____|\___/   \___/\/  \___\_\\_____|______| |_____|_| |_|\__\___|\__, |_|  \__,_|\__|_|\___/|_| |_|
;                                                                           __/ |                            
;                                                                          |___/                             
;
;  _              _           
; | |_  ___ _ __ (_)_ _  __ _ 
; | ' \/ _ \ '  \| | ' \/ _` |
; |_||_\___/_|_|_|_|_||_\__, |
;                       |___/ 
;❗️assumes voron tap and sensorless homing and presence of _HOME_X and _HOME_Y macros
;❗️refer to https://docs.vorondesign.com/community/howto/clee/sensorless_xy_homing.html
;
[homing_override]
axes: xyz
gcode:
    ## undock from the purginator (will be skipped if not docked)
    _PURGINATOR_UNDOCK
    ## set variables
    {% set pvars = printer['gcode_macro _PURGINATOR_VARS'] %}
    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}  
    ## X homing
    {% if home_all or 'X' in params %}
        ## respond
        {% if params.RESPOND|default(pvars.respond_detail_level)|int >= 1 %}
            RESPOND TYPE=command MSG="🏚️ Homing X axis ..." 
        {% endif %}
        ## home X
        _HOME_X 
    {% endif %} 
    ## Y homing
    {% if home_all or 'Y' in params %}
        ## respond
        {% if params.RESPOND|default(pvars.respond_detail_level)|int >= 1 %}
            RESPOND TYPE=command MSG="🏚️ Homing Y axis ..." 
        {% endif %} 
        ## home Y
        _HOME_Y 
    {% endif %} 
    ## Z homing
    {% if home_all or 'Z' in params %}
        ## prepare nozzle
        _PURGINATOR_PREPARE_NOZZLE_FOR_PROBING
        ## xy travel to homing position
        _purginator_travel X={pvars.z_homing_pos_x} Y={pvars.z_homing_pos_y}
        ## respond
        {% if params.RESPOND|default(pvars.respond_detail_level)|int >= 1 %}
            RESPOND TYPE=command MSG="🏚️ Homing Z axis ..." 
        {% endif %} 
        ## home Z
        G28 Z
        ## z travel to height after homing
        _purginator_travel Z={pvars.z_height_after_homing}
    {% endif %}
    ## dock to the purginator
    _PURGINATOR_DOCK


;                    _                 _              _             _ _ _           
;  __ _ _  _ __ _ __| |  __ _ __ _ _ _| |_ _ _ _  _  | |_____ _____| | (_)_ _  __ _ 
; / _` | || / _` / _` | / _` / _` | ' \  _| '_| || | | / -_) V / -_) | | | ' \/ _` |
; \__, |\_,_\__,_\__,_| \__, \__,_|_||_\__|_|  \_, | |_\___|\_/\___|_|_|_|_||_\__, |
;    |_|                |___/                  |__/                           |___/ 
;
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
gcode:
    ## undock from the purginator
    _PURGINATOR_UNDOCK
    ## Prepare nozzle
    _PURGINATOR_PREPARE_NOZZLE_FOR_PROBING
    ## respond
    {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 1 %}
         RESPOND TYPE=command MSG="⚖️ Quad Gantry Levelling ..."
    {% endif %}
    ## original QGL
    _QUAD_GANTRY_LEVEL
    ## dock to the purginator
    _PURGINATOR_DOCK




;  _____                 _             _               _    _                 __  __                          
; |  __ \               (_)           | |             | |  | |               |  \/  |                         
; | |__) |   _ _ __ __ _ _ _ __   __ _| |_ ___  _ __  | |  | |___  ___ _ __  | \  / | __ _  ___ _ __ ___  ___ 
; |  ___/ | | | '__/ _` | | '_ \ / _` | __/ _ \| '__| | |  | / __|/ _ \ '__| | |\/| |/ _` |/ __| '__/ _ \/ __|
; | |   | |_| | | | (_| | | | | | (_| | || (_) | |    | |__| \__ \  __/ |    | |  | | (_| | (__| | | (_) \__ \
; |_|    \__,_|_|  \__, |_|_| |_|\__,_|\__\___/|_|     \____/|___/\___|_|    |_|  |_|\__,_|\___|_|  \___/|___/
;                   __/ |                                                                                     
;                  |___/                                                                                      
;
;
; This section contains user macros for the various tasks the purginator can carry out.



[gcode_macro DOCK]
description: Dock the toolhead to the purginator
gcode:
    _purginator_autohome_xy
    _PURGINATOR_DOCK {rawparams}

[gcode_macro UNDOCK]
description: Release the toolhead from the purginator
gcode:
    _PURGINATOR_UNDOCK {rawparams}


[gcode_macro AWAY]
description: Make toolhead and purginator components accessible for manual intervention
gcode:
    _purginator_autohome_xyz
    _PURGINATOR_AWAY


[gcode_macro BRUSH]
description: Brush the nozle
description: Override default wipes and zigzags with parameters WIPE and ZIGZAG
gcode:
    _purginator_autohome_xy
    _PURGINATOR_BRUSH {rawparams}


[gcode_macro CLEAN]
description: Clean the nozzly by heating up and repeatedly brushing it during cooldown
description: 
gcode:
    _purginator_autohome_xy
    _PURGINATOR_CLEAN_NOZZLE


[gcode_macro COOLDOWN]
description: Turn off nozzle heating and repeatedly brush the nozzle until cool.  
description: Makes nozzle cooling twice as fast and nozzle will be clean.
gcode:
    _purginator_autohome_xy
    _PURGINATOR_RAPID_NOZZLE_COOLING {rawparams}


[gcode_macro PURGE]
description: Purge Filament according to settings
gcode:
    _purginator_set_minimum_nozzle_temp
    _purginator_autohome_xyz
    _PURGINATOR_PURGE {rawparams}
    _purginator_set_original_nozzle_temp


[gcode_macro CUT]
description: Cut Filament Tip for filament change
gcode:
    _purginator_autohome_xy
    _purginator_set_minimum_nozzle_temp
    _PURGINATOR_CUT
    _purginator_set_original_nozzle_temp

    
[gcode_macro FLUSH]
description: Empty the purge tray 
gcode:
    _EXTRACTOR_EMPTY_TRAY {rawparams}

;  _    _                           _    _                   ______      _                 _                 
; | |  | |                         | |  | |                 |  ____|    | |               (_)                
; | |__| | __ _ _ __  _ __  _   _  | |__| | __ _ _ __ ___   | |__  __  _| |_ ___ _ __  ___ _  ___  _ __  ___ 
; |  __  |/ _` | '_ \| '_ \| | | | |  __  |/ _` | '__/ _ \  |  __| \ \/ / __/ _ \ '_ \/ __| |/ _ \| '_ \/ __|
; | |  | | (_| | |_) | |_) | |_| | | |  | | (_| | | |  __/  | |____ >  <| ||  __/ | | \__ \ | (_) | | | \__ \
; |_|  |_|\__,_| .__/| .__/ \__, | |_|  |_|\__,_|_|  \___|  |______/_/\_\\__\___|_| |_|___/_|\___/|_| |_|___/
;              | |   | |     __/ |                                                                           
;              |_|   |_|    |___/                                                                            
;
;
;  RELEVANT HAPPY HARE CONFIG SETTINGS:
;
;   mmu.macro_vars.cfg:
;                   
;     variable_enable_park                  :  False                      
;     variable_enable_park_runout           :  False                         
;     variable_enable_park_standalone       :  False                         
;     variable_restore_xy_pos               :  "next"                       
;     variable_park_z_hop                   :  0.0                                           
;     variable_park_after_form_tip          :  False          
;     variable_user_pre_unload_extension    :  '_PURGINATOR_HAPPY_PRE_UNLOAD' 
;     variable_user_post_unload_extension   :  '_PURGINATOR_HAPPY_POST_UNLOAD'  
;     variable_user_pre_load_extension      :  '_PURGINATOR_HAPPY_PRE_LOAD' 
;     variable_user_post_load_extension     :  '_PURGINATOR_HAPPY_POST_LOAD' 
;     variable_user_pause_extension         :  '_PURGINATOR_HAPPY_PAUSE' 
;     variable_user_resume_extension        :  '_PURGINATOR_HAPPY_RESUME' 
;     variable_user_cancel_extension        :  '_PURGINATOR_HAPPY_CANCEL' 
;
;   mmu_parameters.cfg:
;
;     force_form_tip_standalone             :  1                             
;     form_tip_macro                        :  _PURGINATOR_HAPPY_FORM_TIP_MACRO 
;     z_hop_height_toolchange               :  0                             
;     z_hop_height_error                    :  0                            


[gcode_macro _PURGINATOR_HAPPY_PRE_UNLOAD]
description: Happy Hare User Pre Unload Extension
gcode:
    _PURGINATOR_PARK PRINTING=params.PRINTING


[gcode_macro _PURGINATOR_HAPPY_POST_UNLOAD]
description: Happy Hare User Post Unload Extension
gcode:
    _EXTRACTOR_OFF

  
[gcode_macro _PURGINATOR_HAPPY_PRE_LOAD]
description: Happy Hare User Pre Load Extension
gcode:
  ## make sure toolhead is docked
  _PURGINATOR_DOCK
  ## optional nozzle brushing before loading filament
  {% if printer['gcode_macro _PURGINATOR_VARS'].enable_pre_load_brushing %}
      {% set wipes = printer['gcode_macro _PURGINATOR_VARS'].pre_load_brush_wipes|int %}
      {% set zigzags = printer['gcode_macro _PURGINATOR_VARS'].pre_load_brush_zigzags|int %}
      {% set start_y_depth = printer['gcode_macro _PURGINATOR_VARS'].pre_load_brush_start_y_depth|int %}
      _PURGINATOR_BRUSH WIPES={wipes} ZIGZAGS={zigzags} DEPTH={start_y_depth} LIFTSPEED={printer['gcode_macro _PURGINATOR_VARS'].park_lift_speed}
  {% endif %}
  ## flag filament changed
  _purginator_purge_set_filament_changed
  ## clear accumulated retraction
  _purginator_retract_clear_accumulated_retraction


[gcode_macro _PURGINATOR_HAPPY_POST_LOAD]
description: Happy Hare User Post Load Extension
gcode:
  ## execute purge sequence, optionally retracting filament and descending gantry during servo waittimes
  _PURGINATOR_PURGE RETRACTSPEED={printer['gcode_macro _PURGINATOR_VARS'].return_retract_speed } DESCENDSPEED={printer['gcode_macro _PURGINATOR_VARS'].return_descend_speed}
  ## return to print
  _PURGINATOR_RETURN PRINTING=params.PRINTING


[gcode_macro _PURGINATOR_HAPPY_PAUSE]
description: Happy Hare User Pause Extension
gcode:
  _PURGINATOR_PARK


[gcode_macro _PURGINATOR_HAPPY_RESUME]
description: Happy Hare User Resume Extension
gcode:
    ## purge if a return position is set (prevents purging and errors if the print is paused before it began)
    {% if printer['gcode_macro _PURGINATOR_RETURN'].return_pos_stored %}
        ## execute purge sequence, optionally retracting filament and descending gantry during servo waittimes
        _PURGINATOR_PURGE RETRACTSPEED={printer['gcode_macro _PURGINATOR_VARS'].return_retract_speed } DESCENDSPEED={printer['gcode_macro _PURGINATOR_VARS'].return_descend_speed}
        ## return to print suppressing the use of happy hare nextpos
        _PURGINATOR_RETURN NEXTPOS=0
    {% endif %}



[gcode_macro _PURGINATOR_HAPPY_CANCEL]
description: Happy Hare User Cancel Extension
gcode:
  _PURGINATOR_PARK
  _purginator_clear_return_position
  MMU_END
  _PURGINATOR_RAPID_NOZZLE_COOLING
  _PURGINATOR_AWAY
  #PRINT_END

  
[gcode_macro _PURGINATOR_HAPPY_FORM_TIP_MACRO]
description: Happy Hare Form Tip Macro
gcode:
  _PURGINATOR_CUT LIFTSPEED={printer['gcode_macro _PURGINATOR_VARS'].park_lift_speed}
  _EXTRACTOR_EMPTY_TRAY


;  _____                 _             _               __  __                          
; |  __ \               (_)           | |             |  \/  |                         
; | |__) |   _ _ __ __ _ _ _ __   __ _| |_ ___  _ __  | \  / | __ _  ___ _ __ ___  ___ 
; |  ___/ | | | '__/ _` | | '_ \ / _` | __/ _ \| '__| | |\/| |/ _` |/ __| '__/ _ \/ __|
; | |   | |_| | | | (_| | | | | | (_| | || (_) | |    | |  | | (_| | (__| | | (_) \__ \
; |_|    \__,_|_|  \__, |_|_| |_|\__,_|\__\___/|_|    |_|  |_|\__,_|\___|_|  \___/|___/
;                   __/ |                                                              
;                  |___/                                                               
;
; this section contains all purginator macros (capital letters) and subroutines (lower case letters)
; sorted by purpose.




;  ___          _   _                          _   _   _         _         _   _           
; |   \ ___  __| |_(_)_ _  __ _   __ _ _ _  __| | | | | |_ _  __| |___  __| |_(_)_ _  __ _ 
; | |) / _ \/ _| / / | ' \/ _` | / _` | ' \/ _` | | |_| | ' \/ _` / _ \/ _| / / | ' \/ _` |
; |___/\___/\__|_\_\_|_||_\__, | \__,_|_||_\__,_|  \___/|_||_\__,_\___/\__|_\_\_|_||_\__, |
;                         |___/                                                      |___/ 


[gcode_macro _PURGINATOR_DOCK]
description: Dock the toolhead to the purginator
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_PURGINATOR_DOCK {rawparams}"
    {% endif %}
    ## acquire required paramenters
    {% set purge_pos_x = printer['gcode_macro _PURGINATOR_VARS'].purge_pos_x|float %}
    {% set purge_pos_y = printer['gcode_macro _PURGINATOR_VARS'].purge_pos_y|float %}
    ## find out docking status
    {% set purginator_deployed = printer['gcode_macro _purginator_deploy'].purginator_deployed %}
    {% set docked = printer.gcode_move.gcode_position.x == purge_pos_x and  printer.gcode_move.gcode_position.y == purge_pos_y and purginator_deployed %}
    ## dock if not already docked
    {% if not docked %}
        ## save gcode status
        SAVE_GCODE_STATE NAME=_PURGINATOR_DOCK
        ## respond beginning of docking sequence
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
            RESPOND TYPE=command MSG="🟠 Docking toolhead ..."
        {% endif %}
        ## move elevator servo down and wait for servo travel, optionally retract filament and/or lift/descend gantry instead of waiting for servo travel for an equal amount of time
        _purginator_elevator_servo_down {rawparams}
        ## travel to purge position, optionally simultaneously retract filament and/or lift/descend gantry 
        _purginator_travel X={purge_pos_x} Y={purge_pos_y} {rawparams}
        ## finish moves
        M400
        ## deploy the purginator, optionally retract filament and/or lift/descend gantry instead of waiting for servo travels for an equal amount of time
        _purginator_deploy {rawparams}
        ## wiggle nozzle into purge hole, optionally simultaneously retract filament and/or lift/descend gantry 
        _purginator_wiggle {rawparams}
        ## respond end of docking sequence
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 1 %}
            RESPOND TYPE=command MSG="🔴 Toolhead docked"
        {% endif %}
        ## restore gcode status
        RESTORE_GCODE_STATE NAME=_PURGINATOR_DOCK
    {% endif %}
    
    
[gcode_macro _PURGINATOR_UNDOCK]
description: Undock the toolhead from the purginator
description: Optionally eject purged filament and/or wipe nozzle if parameters EJECT and/or WIPE set True.
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_PURGINATOR_UNDOCK {rawparams}"
    {% endif %}
    ## acquire required paramenters
    {% set purge_pos_x = printer['gcode_macro _PURGINATOR_VARS'].purge_pos_x|float %}
    {% set purge_pos_y = printer['gcode_macro _PURGINATOR_VARS'].purge_pos_y|float %}
    ## find out docking status
    {% set purginator_deployed = printer['gcode_macro _purginator_deploy'].purginator_deployed %}
    {% set docked = printer.gcode_move.gcode_position.x == purge_pos_x and  printer.gcode_move.gcode_position.y == purge_pos_y and purginator_deployed %}
    ## undock if not already undocked
    {% if docked or "xy" not in printer.toolhead.homed_axes %}
        ## respond beginning of undocking sequence
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
            RESPOND TYPE=command MSG="🟠 Undocking toolhead ..."
        {% endif %}
        ## retract the purginator
        {% if params.WIPE %}
            ## execute retract sequence with nozzle priming and wipe
            _purginator_retract_with_nozzle_wipe {rawparams}
            ## respond retract with nozzle prime and wipe
            {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 1 %}
            RESPOND TYPE=command MSG="🟢 Toolhead undocked, nozzle was primed and wiped"
            {% endif %}
        {% else %}
            ## execute regular retract sequence
            _purginator_retract {rawparams}
            ## respond regular retract
            {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 1 %}
            RESPOND TYPE=command MSG="🟢 Toolhead undocked"
            {% endif %}
        {% endif %} 
    {% endif %}

    
[gcode_macro _purginator_deploy]
description: Servo move sequence to deploy the purginator
variable_purginator_deployed: True
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_deploy {rawparams}"
    {% endif %}
    ## purginator is not deployed
    {% if not purginator_deployed %}
        ## move elevator servo to down position
        _purginator_elevator_servo_down {rawparams}
        ## move retractor servo to deployed position 
        _purginator_retractor_servo_deploy {rawparams}
        ## move elevator servo to up position
        _purginator_elevator_servo_up {rawparams}
        ## set gcode variable purginator_deployed true
        SET_GCODE_VARIABLE MACRO=_purginator_deploy VARIABLE=purginator_deployed VALUE={True}
    {% endif %}


[gcode_macro _purginator_retract]
description: Servo move sequence to retract the purginator
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_retract {rawparams}"
    {% endif %}
    ## purginatior is deployed
    {% if printer['gcode_macro _purginator_deploy'].purginator_deployed %}
        ## wait for moves 
        M400
        ## move elevator servo to down position
        _purginator_elevator_servo_down {rawparams}
        ## move retractor servo to retracted position
        _purginator_retractor_servo_retract {rawparams}
        ## move elevator servo back to up position skipping waiting for servo travel
        
        _purginator_elevator_servo_up SKIP_WAIT=True
        ## set gcode variable purginator_deployed false
        SET_GCODE_VARIABLE MACRO=_purginator_deploy VARIABLE=purginator_deployed VALUE={False}
    {% endif %}


[gcode_macro _purginator_retract_with_nozzle_wipe]
description: Servo move sequence to wipe the nozzel 
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_retract_with_nozzle_wipe {rawparams}"
    {% endif %}
    ## wait for moves 
    M400
    ## Set relative extrusion
    M83
    ## unretract any accumulated retraction
    _purginator_filament_unretract
    ## extrude a small amount of filament 
    G0 E{ printer['gcode_macro _PURGINATOR_VARS'].wipe_extrusion_dist } F{ printer['gcode_macro _PURGINATOR_VARS'].wipe_extrusion_speed | float * 60 }
    ## wipe nozzle by simultaneously retracting and lowering the purginator without waiting for elevator servo travel
    _purginator_elevator_servo_down SKIP_WAIT=True
    _purginator_retractor_servo_retract {rawparams}
    ## set elevator servo up again skipping wait for servo travel
    _purginator_elevator_servo_up SKIP_WAIT=True
    ## set gcode variable purginator_deployed false
    SET_GCODE_VARIABLE MACRO=_purginator_deploy VARIABLE=purginator_deployed VALUE={False}


[gcode_macro _purginator_wiggle]
description: Toolhead move sequence to wiggle the nozzle into the purginator purge hole
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_wiggle {rawparams}"
    {% endif %}
    ## nozzle wiggle is enabled
    {% if printer['gcode_macro _PURGINATOR_VARS'].enable_nozzle_wiggle %}
        ## set variables
        {% set offset_x = printer['gcode_macro _PURGINATOR_VARS'].wiggle_offset_x %}
        {% set offset_y = printer['gcode_macro _PURGINATOR_VARS'].wiggle_offset_y %}
        {% set maxpos = printer.toolhead.axis_maximum %}
        {% set retract_speed = params.RETRACTSPEED|default(0)|float %}
        {% set px = printer['gcode_macro _PURGINATOR_VARS'].purge_pos_x %}
        {% set py= printer['gcode_macro _PURGINATOR_VARS'].purge_pos_y %}
        ## Respond wiggle
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
            RESPOND TYPE=command MSG="🔅 Wiggling nozzle ..."
        {% endif %}
        ## execute wiggle sequence
        _purginator_travel X={px} Y={[py + offset_y, maxpos.y]|min} {rawparams}
        _purginator_travel X={px + offset_x} Y={py-offset_y} {rawparams}
        _purginator_travel X={px - offset_x} Y={py-offset_y} {rawparams}
        _purginator_travel X={px} Y={[py + offset_y, maxpos.y]|min} {rawparams}
        _purginator_travel X={px} Y={py - offset_y} {rawparams}
        _purginator_travel X={px - offset_x} Y={[py + offset_y, maxpos.y]|min} {rawparams}
        _purginator_travel X={px + offset_x} Y={[py + offset_y, maxpos.y]|min} {rawparams}
        _purginator_travel X={px} Y={py - offset_y} {rawparams}
        _purginator_travel X={px} Y={[py + offset_y, maxpos.y]|min} {rawparams}
        _purginator_travel X={px} Y={py} {rawparams}
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 3 %}
            RESPOND TYPE=command MSG="🔅 ... nozzle wiggle complete"
        {% endif %}
    {% endif %}


[gcode_macro _purginator_retractor_servo_deploy]
description: Move retractor servo to deployed position
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_retractor_servo_deploy {rawparams}"
    {% endif %}
    _purginator_move_servo SERVO=retractor ANGLE={printer['gcode_macro _PURGINATOR_VARS'].retractor_servo_angle_deployed} {rawparams}


[gcode_macro _purginator_retractor_servo_retract]
description: Move retractor servo to retracted position
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_retractor_servo_retract {rawparams}"
    {% endif %}
    _purginator_move_servo SERVO=retractor ANGLE={printer['gcode_macro _PURGINATOR_VARS'].retractor_servo_angle_retracted} {rawparams}


[gcode_macro _purginator_retractor_servo_eject]
description: Move retractor servo to eject position
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_retractor_servo_eject {rawparams}"
    {% endif %}
    _purginator_move_servo SERVO=retractor ANGLE={printer['gcode_macro _PURGINATOR_VARS'].retractor_servo_angle_eject} {rawparams}


[gcode_macro _purginator_elevator_servo_up]
description: Move elevator servo to up position
variable_purginator_up: True
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_elevator_servo_up {rawparams}"
    {% endif %}
    {% if not purginator_up %}
        _purginator_move_servo SERVO=elevator ANGLE={printer['gcode_macro _PURGINATOR_VARS'].elevator_servo_angle_up} {rawparams}
        SET_GCODE_VARIABLE MACRO=_purginator_elevator_servo_up VARIABLE=purginator_up VALUE={True}
    {% endif %}


[gcode_macro _purginator_elevator_servo_down]
description: Move elevator servo to down position
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_elevator_servo_down {rawparams}"
    {% endif %}
    {% if printer['gcode_macro _purginator_elevator_servo_up'].purginator_up %}
        _purginator_move_servo SERVO=elevator ANGLE={printer['gcode_macro _PURGINATOR_VARS'].elevator_servo_angle_down} {rawparams}
        SET_GCODE_VARIABLE MACRO=_purginator_elevator_servo_up VARIABLE=purginator_up VALUE={False}
    {% endif %}

;                       
;  __ ___ __ ____ _ _  _ 
; / _` \ V  V / _` | || |
; \__,_|\_/\_/\__,_|\_, |
;                   |__/ 
;
[gcode_macro _PURGINATOR_AWAY]
description: Moves the toolhead away from the purginator and lift gantry to enable access to all purginator components
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_PURGINATOR_AWAY {rawparams}"
    {% endif %}
    ## respond beginning of away sequence
    {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
        RESPOND TYPE=command MSG="👋🏻 Moving toolhead away from the purginator ..."
    {% endif %}
    ## Undock
    _PURGINATOR_UNDOCK
    ## Travel xy to away position
    _purginator_travel X={printer['gcode_macro _PURGINATOR_VARS'].away_x | float} Y={printer['gcode_macro _PURGINATOR_VARS'].away_y | float } 
    ## if z is homed also travel to z away position
    {% if "z" in printer.toolhead.homed_axes %}
        ## respond end of away sequence
        _purginator_travel Z={[printer['gcode_macro _PURGINATOR_VARS'].away_z, printer.gcode_move.gcode_position.z]|max}
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 1 %}
            RESPOND TYPE=command MSG="👋🏻 Toolhead away"
        {% endif %}  
    {% else %}
        ## respond end of away sequence with exception
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 1 %}
            RESPOND TYPE=command MSG="👋🏻 Toolhead away, Z move skipped because Z not homed"
        {% endif %}
    {% endif %}


;  ___          _                  _   ___     _                 
; | _ \__ _ _ _| |__  __ _ _ _  __| | | _ \___| |_ _  _ _ _ _ _  
; |  _/ _` | '_| / / / _` | ' \/ _` | |   / -_)  _| || | '_| ' \ 
; |_| \__,_|_| |_\_\ \__,_|_||_\__,_| |_|_\___|\__|\_,_|_| |_||_|
;
[gcode_macro _PURGINATOR_PARK]
description: Park toolhead
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_PURGINATOR_PARK {rawparams}"
    {% endif %}
    ## set variables
    {% set printing = params.PRINTING | default ( printer.mmu.print_state == 'printing' ) %}
    {% set retractspeed = printer['gcode_macro _PURGINATOR_VARS'].park_subsequent_retract_speed %}
    {% set liftspeed = printer['gcode_macro _PURGINATOR_VARS'].park_lift_speed %}
    {% set at_purge_position = printer.gcode_move.gcode_position.x == printer['gcode_macro _PURGINATOR_VARS'].purge_pos_x and printer.gcode_move.gcode_position.y == printer['gcode_macro _PURGINATOR_VARS'].purge_pos_y%}
    ## save gcode state
    SAVE_GCODE_STATE NAME=_PURGINATOR_PARK
    ## no return position is set and printing
    {% if not printer['gcode_macro _PURGINATOR_RETURN'].return_pos_stored and printing and not at_purge_position%}
        ## disable pressure advance
        SET_PRESSURE_ADVANCE ADVANCE=0
        ## Sync gear motor
        mmu_sync_gear_motor
        ## respond begin of parking sequence
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 1 %}
            RESPOND TYPE=command MSG="🅿️ Parking toolhead ..."
        {% endif %}
        ## save return position
        _purginator_save_return_position
        ## Set direction for wipe and ramp move
        {% if printer['gcode_macro _PURGINATOR_VARS'].brush_during_park %}
            {% set targetX = printer['gcode_macro _PURGINATOR_VARS'].brush_end|float + printer['gcode_macro _PURGINATOR_VARS'].brush_margin|float %}
            {% set brush_front = printer['gcode_macro _PURGINATOR_VARS'].brush_front|float %}
            {% set brush_back = printer.configfile.config["stepper_y"]["position_max"]|float - printer['gcode_macro _PURGINATOR_VARS'].y_clearance|float %}
            {% set targetY = (brush_back + brush_front) * 0.5 %} 
        {% else %}
            {% set targetX = printer['gcode_macro _PURGINATOR_VARS'].purge_pos_x | float %}
            {% set targetY = printer['gcode_macro _PURGINATOR_VARS'].purge_pos_y | float %}
        {% endif %}
        SET_GCODE_VARIABLE MACRO=_purginator_park_wipe VARIABLE=direction_x VALUE={targetX} 
        SET_GCODE_VARIABLE MACRO=_purginator_park_wipe VARIABLE=direction_y VALUE={targetY} 
        SET_GCODE_VARIABLE MACRO=_purginator_park_ramp VARIABLE=direction_x VALUE={targetX} 
        SET_GCODE_VARIABLE MACRO=_purginator_park_ramp VARIABLE=direction_y VALUE={targetY} 
        ## optional wipe move
        _purginator_park_wipe
        ##  ramp or z_hop if ramp distance = 0
        _purginator_park_ramp
        ## optionally brush before docking
        {% if printer['gcode_macro _PURGINATOR_VARS'].brush_during_park %}
            {% set wipes = printer['gcode_macro _PURGINATOR_VARS'].park_brush_wipes|int %}
            {% set zigzags = printer['gcode_macro _PURGINATOR_VARS'].park_brush_zigzags|int %}
            {% set start_y_depth = printer['gcode_macro _PURGINATOR_VARS'].return_brush_start_y_depth|int %}
            _PURGINATOR_BRUSH_NOZZLE WIPES={wipes} ZIGZAGS={zigzags} START=RH DEPTH={start_y_depth} RETRACTSPEED={retractspeed} LIFTSPEED={liftspeed}
        {% endif  %}
        ## dock toolhead to the purginator
        _PURGINATOR_DOCK RETRACTSPEED={retractspeed} LIFTSPEED={liftspeed}
        ## retract any remaining distance to cutpoint if park_subsequent_retract_speed > 0
        _purginator_filament_retract SPEED={retractspeed}    
        ## respond end of parking sequence
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 1 %}
            {% if printer['gcode_macro _PURGINATOR_VARS'].park_subsequent_retract_speed | float > 0 %}
                RESPOND TYPE=command MSG="🅿️ Toolhead parked with filament retracted at "{retractspeed}" mm/s to cutpoint "{printer['gcode_macro _PURGINATOR_VARS'].blade_pos|float - printer['gcode_macro _PURGINATOR_VARS'].tip_length|float}
            {% elif  printer['gcode_macro _PURGINATOR_VARS'].park_initial_retract_length |float > 0%}
                RESPOND TYPE=command MSG="🅿️ Toolhead parked with initial filament retract to "{printer['gcode_macro _PURGINATOR_VARS'].park_initial_retract_length}
            {% else %}
                RESPOND TYPE=command MSG="🅿️ Toolhead parked without filament retraction"
            {% endif %}
        {% endif %}
    ## return position is already set or not printing
    {% else %}
        _PURGINATOR_DOCK
    {% endif %}
    ## restore gcode state
    RESTORE_GCODE_STATE NAME=_PURGINATOR_PARK


[gcode_macro _PURGINATOR_RETURN]
description:  Return toolhead to print
variable_return_pos_stored:    False
variable_return_pos_x:         999.9
variable_return_pos_y:         999.9
variable_return_pos_z:         999.9
variable_return_travel_height: 999.9
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_PURGINATOR_RETURN {rawparams}"
    {% endif %}
    ## set parameters
    {% set printing = params.PRINTING | default ( printer.mmu.print_state == 'printing' ) %}
    {% set retractspeed = printer['gcode_macro _PURGINATOR_VARS'].return_retract_speed | float%}
    {% set descendspeed = printer['gcode_macro _PURGINATOR_VARS'].return_descend_speed | float %}
    ## sync gear motor
    mmu_sync_gear_motor
    ## return to print if return pos is stored
    {% if return_pos_stored and printing %}
        ## get next pos from happy hare park macro
        {% set nx,ny = printer['gcode_macro _MMU_PARK'].next_xy|map('float') %}
        ## update return pos to happy hare nextpos if available and not prohibited by parameter NEXTPOS=False
        {% if nx and ny and params.NEXTPOS | default ( 1 ) | int == 1 %}
            {% set return_pos_x = nx %}
            {% set return_pos_y = ny %}
            {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 1 %}
                RESPOND TYPE=command MSG="❇️ Returning toolhead to happy hare nextpos x: "{return_pos_x | round(2)}" y: "{return_pos_y | round(2)}" z: "{return_pos_z | round(2)}" ..."
            {% endif %}
        {% else %}
            ## respond begin of return sequence
            {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 1 %}
                RESPOND TYPE=command MSG="❇️ Returning toolhead to x: "{return_pos_x | round(2)}" y: "{return_pos_y | round(2)}" z: "{return_pos_z | round(2)}" ..."
            {% endif %}
        {% endif %}
        ## prime nozzle
        _PURGINATOR_UNDOCK WIPE=True {rawparams}
        ## if enabled, brush nozzle before returning to print
        {% if printer['gcode_macro _PURGINATOR_VARS'].brush_during_return %}
            {% set wipes = printer['gcode_macro _PURGINATOR_VARS'].return_brush_wipes|int %}
            {% set zigzags = printer['gcode_macro _PURGINATOR_VARS'].return_brush_zigzags|int %}
            {% set start_y_depth = printer['gcode_macro _PURGINATOR_VARS'].return_brush_start_y_depth|int %}
            _PURGINATOR_BRUSH_NOZZLE WIPES={wipes} ZIGZAGS={zigzags} DEPTH={start_y_depth} RETRACTSPEED={retractspeed} DESCENDSPEED={descendspeed}
        {% endif  %}
        ## travel to park_z_hop above return position, optionally optionally retracting filament
        _purginator_travel X={return_pos_x} Y={return_pos_y} Z={return_travel_height} RETRACTSPEED={retractspeed}
        ## lower nozzle to print level, optionally optionally retracting filament
        _purginator_travel Z={return_pos_z} RETRACTSPEED={retractspeed}
        ## unretract filament
        _purginator_filament_unretract SPEED={printer['gcode_macro _PURGINATOR_VARS'].return_unretract_speed}
        ## clear return position
        _purginator_clear_return_position
        ## respond end of return sequence
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 1 %}
            RESPOND TYPE=command MSG="❇️ Toolhead returned"
        {% endif %}   
    ## not printing or no return position is stored (begin of print)
    {% else %}
        ## undock with nozzle wipe
        _PURGINATOR_UNDOCK WIPE=True {rawparams}
        ## unretract any accumulated retraction
        _purginator_filament_unretract SPEED={printer['gcode_macro _PURGINATOR_VARS'].return_unretract_speed}
    {% endif %}


[gcode_macro _purginator_save_return_position]
description: Set return position
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_save_return_position {rawparams}"
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_PURGINATOR_RETURN VARIABLE=return_pos_x VALUE={printer.gcode_move.gcode_position.x}
    SET_GCODE_VARIABLE MACRO=_PURGINATOR_RETURN VARIABLE=return_pos_y VALUE={printer.gcode_move.gcode_position.y}
    SET_GCODE_VARIABLE MACRO=_PURGINATOR_RETURN VARIABLE=return_pos_z VALUE={printer.gcode_move.gcode_position.z}
    SET_GCODE_VARIABLE MACRO=_PURGINATOR_RETURN VARIABLE=return_travel_height VALUE={ printer.gcode_move.gcode_position.z + printer['gcode_macro _PURGINATOR_VARS'].park_z_hop | float }
    SET_GCODE_VARIABLE MACRO=_PURGINATOR_RETURN VARIABLE=return_pos_stored VALUE={ True }
    {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 3 %}
        RESPOND TYPE=command MSG="📝 Return pos x: "{printer['gcode_macro _PURGINATOR_RETURN'].return_pos_x}" y: "{printer['gcode_macro _PURGINATOR_RETURN'].return_pos_y}" z: "{printer['gcode_macro _PURGINATOR_RETURN'].return_pos_z}" stored"
    {% endif %}


[gcode_macro _purginator_clear_return_position]
description: Clear return position
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_clear_return_position {rawparams}"
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_PURGINATOR_RETURN VARIABLE=return_pos_stored VALUE={ False }
    {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 3 %}
        RESPOND TYPE=command MSG="📝 Return pos cleared"
    {% endif %}


[gcode_macro _purginator_park_initial_retract]
description: Park Initial Retract move
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_park_initial_retract {rawparams}"
    {% endif %}
    {% set max_retract = printer['gcode_macro _PURGINATOR_VARS'].blade_pos|float - printer['gcode_macro _PURGINATOR_VARS'].tip_length|float - printer['gcode_macro _purginator_filament_retract'].accumulated_retraction|float  %}
    {% set retract = [printer['gcode_macro _PURGINATOR_VARS'].park_initial_retract_length|float,  max_retract]|min %}
    {% if retract > 0 %}
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
            RESPOND TYPE=command MSG="🐚 Initial Retract "{retract|round(2)}" Speed "{printer['gcode_macro _PURGINATOR_VARS'].park_initial_retract_speed}
        {% endif %}
        _purginator_filament_retract LENGTH={retract} SPEED={retract_speed}
    {% endif %}


[gcode_macro _purginator_park_wipe]
description: Park Wipe move
variable_direction_x: 0
variable_direction_y: 0 
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_park_wipe {rawparams}"
    {% endif %}
    {% set gpos = printer.gcode_move.gcode_position %}
    {% set maxpos = printer.toolhead.axis_maximum %}
    {% set travel_speed = params.TRAVELSPEED | default ( printer['gcode_macro _PURGINATOR_VARS'].travel_speed ) | float %}
    {% set retract_speed = params.RETRACTSPEED | default ( printer['gcode_macro _PURGINATOR_VARS'].park_subsequent_retract_speed ) | float %}
    {% set target_dist_x = direction_x  - gpos.x %}
    {% set target_dist_y = direction_y - gpos.y %}
    {% set target_dist = (target_dist_x**2 + target_dist_y**2)**0.5 %}
    {% set dx = target_dist_x/target_dist %}
    {% set dy = target_dist_y/target_dist %}
    {% set wipe_length = params.LENGHT | default ( printer['gcode_macro _PURGINATOR_VARS'].wipe_length ) | float %}
    {% set wipe_x = [[gpos.x + dx * wipe_length, maxpos.x]|min, 0]|max %}
    {% set wipe_y = [[gpos.y + dy * wipe_length, maxpos.y]|min, 0]|max %}
    {% if wipe_length != 0 %}
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
            RESPOND TYPE=command MSG="⛸️ Wipe "{wipe_length}" direction x "{direction_x|round(2)}" y "{direction_y|round(2)}
        {% endif %}
        _purginator_travel X={wipe_x} Y={wipe_y} TRAVELSPEED={travel_speed} RETRACTSPEED={retract_speed}
    {% endif %}


[gcode_macro _purginator_park_ramp]
description: Park Ramp move
variable_direction_x: 0
variable_direction_y: 0
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_park_ramp {rawparams}"
    {% endif %}
    {% set gpos = printer.gcode_move.gcode_position %}
    {% set maxpos = printer.toolhead.axis_maximum %}
    {% set travel_speed = params.TRAVELSPEED|default(printer['gcode_macro _PURGINATOR_VARS'].travel_speed)|float %}
    {% set retract_speed = params.RETRACTSPEED|default(printer['gcode_macro _PURGINATOR_VARS'].park_subsequent_retract_speed)|float %}
    {% set target_dist_x = direction_x  - gpos.x %}
    {% set target_dist_y = direction_y - gpos.y %}
    {% set target_dist = (target_dist_x**2 + target_dist_y**2)**0.5 %}
    {% set dx = target_dist_x/target_dist %}
    {% set dy = target_dist_y/target_dist %}
    {% set ramp_length = [ params.RAMPLENGHT | default ( printer['gcode_macro _PURGINATOR_VARS'].ramp_length ) | float, target_dist ] | min %}
    {% set z_hop = params.Z_HOP|default(printer['gcode_macro _PURGINATOR_VARS'].park_z_hop)|float %}
    {% set ramp_x = [[gpos.x + dx * ramp_length, maxpos.x]|min, 0]|max|float %}
    {% set ramp_y = [[gpos.y + dy * ramp_length, maxpos.y]|min, 0]|max|float %}
    {% set ramp_z = [gpos.z + z_hop, maxpos.z]|min|float %}
    {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
        {% if ramp_length != 0 %}
            RESPOND TYPE=command MSG="🎢 Ramp length "{ ramp_length | round(2) }" ascend "{z_hop}" direction x "{ direction_x | round(2) }" y "{direction_y | round(2) }
        {% else %}
            RESPOND TYPE=command MSG="⬆ Z Hop "{z_hop}" mm"
        {% endif %}
    {% endif %}
    _purginator_travel X={ramp_x} Y={ramp_y} Z={ramp_z} TRAVELSPEED={travel_speed} RETRACTSPEED={retract_speed}


;  ___             _    _                          _   _  _           _        ___          _ _           
; | _ )_ _ _  _ __| |_ (_)_ _  __ _   __ _ _ _  __| | | \| |___ _____| |___   / __|___  ___| (_)_ _  __ _ 
; | _ \ '_| || (_-< ' \| | ' \/ _` | / _` | ' \/ _` | | .` / _ \_ /_ / / -_) | (__/ _ \/ _ \ | | ' \/ _` |
; |___/_|  \_,_/__/_||_|_|_||_\__, | \__,_|_||_\__,_| |_|\_\___/__/__|_\___|  \___\___/\___/_|_|_||_\__, |
;                             |___/                                                                 |___/ 
;
[gcode_macro _PURGINATOR_BRUSH]
description: Brushes the nozzle and returns the toolhead to origin.
description: WIPES: Number of wipes passes in x direction.
description: ZIGZAGS: Number zigzag moves in y direction during one wipe
description: STAY=1 ... Leave toolhead at brushing endposition instead of returning. Useful for executing different consecutive brush patterns in a macro.
description: DOCK=1 ... Dock the toolhead after brushing instead of returning.
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_PURGINATOR_BRUSH {rawparams}"
    {% endif %}
    {% set pvars = printer['gcode_macro _PURGINATOR_VARS'] %}
    {% set gpos = printer.gcode_move.gcode_position %}
    {% set wipes = params.WIPES|default(pvars.default_wipes)|int %}
    {% set zigzags = params.ZIGZAGS|default(pvars.default_zigzags)|int %}
    {% set homed = "xy" in printer.toolhead.homed_axes %}
    {% set docked = (printer.toolhead.position.x == pvars.purge_pos_x and printer.toolhead.position.y == pvars.purge_pos_y) or not homed %}
    {% set stay_after_brushing = params.STAY|default(0)|int == 1 %}
    {% set dock_after_brushing = params.DOCK|default(0)|int == 1 %}
    {% set fanspeed = printer["fan"].speed * 255|int %}
    ## Set fan to maximum
    M106 S255
    ## Undock if necessary 
    _PURGINATOR_UNDOCK
    _PURGINATOR_BRUSH_NOZZLE WIPES={wipes} ZIGZAGS={zigzags} {rawparams}
    ## Set fanspeed to original setting
    M106 S{fanspeed}
    ## Return or stay
    {% if not stay_after_brushing and homed and not dock_after_brushing %}
        _purginator_travel X={gpos.x} Y={gpos.y}
    {% endif %}
    ## Dock if toolhead was docked before or docking is forced by parameter
    {% if (docked  and not stay_after_brushing) or dock_after_brushing %}
        _PURGINATOR_DOCK
    {% endif %}


[gcode_macro _PURGINATOR_BRUSH_NOZZLE]
description: Travel to brush start pos and brush nozzle according to paramenters
description: WIPES: Number of wipes passes in x direction.
description: ZIGZAGS: Number zigzag moves in y direction during one wipe
description: START: Where to start brushing - "LH" or "RH". Default is the nearest to the toolhead.
description: DEPTH: brush start and end y coordinate relative to brush front. 0 .. brush front 100 .. brush back 
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_PURGINATOR_BRUSH_NOZZLE {rawparams}"
    {% endif %}
    ## save fanspeed
    {% set fanspeed = printer["fan"].speed * 255 | int %}
    ## set parameters
    {% set wipes = params.WIPES | default ( printer['gcode_macro _PURGINATOR_VARS'].default_wipes ) | int %}
    {% set zigzags = params.ZIGZAGS | default ( printer['gcode_macro _PURGINATOR_VARS'].default_zigzags ) | int %}
    {% set brush_speed = params.BRUSHSPEED | default ( printer['gcode_macro _PURGINATOR_VARS'].brush_speed ) | float %}
    {% set brush_accel = params.BRUSHACCEL | default ( printer['gcode_macro _PURGINATOR_VARS'].brush_acceleration ) | float %}
    {% set brush_start_y_adjust = [ [ params.DEPTH | default ( 50 ) | int , 100 ] | min , 0 ] | max    %}
    ## brush dimensions
    {% set brush_LH = printer['gcode_macro _PURGINATOR_VARS'].brush_start | float %}
    {% set brush_RH = printer['gcode_macro _PURGINATOR_VARS'].brush_end | float %}
    {% set brush_x_width = brush_RH - brush_LH %}
    {% set brush_x_mid = ( brush_LH + brush_RH ) * 0.5 %}
    {% set brush_front = printer['gcode_macro _PURGINATOR_VARS'].brush_front | float %}
    {% set brush_back = printer.configfile.config["stepper_y"]["position_max"] | float - printer['gcode_macro _PURGINATOR_VARS'].y_clearance | float %}
    {% set brush_y_width = brush_back - brush_front %}
    {% set brush_y_mid = (brush_back + brush_front) * 0.5 %}
    ## determine direction
    {% if not params.START %}
        {% if printer.gcode_move.gcode_position.x < brush_x_mid %}
            {% set left_to_right = True %}
            {% set start = "LH" %}
        {% else %}
            {% set left_to_right = False %}
            {% set start = "RH" %}
        {% endif %}  
    {% elif params.START | lower == "lh" %} 
        {% set left_to_right = True %}
        {% set start = "LH" %}
    {% else %}
        {% set left_to_right = False %}
        {% set start = "RH" %}
    {% endif %}  
    ## determine lh and rh brush start/end coordinates
    {% set brush_start_LH = brush_LH - printer['gcode_macro _PURGINATOR_VARS'].brush_margin | float %}
    {% set brush_start_RH = brush_RH + printer['gcode_macro _PURGINATOR_VARS'].brush_margin | float %}
    {% set brush_start_Y = brush_front + brush_y_width * brush_start_y_adjust / 100 %}
    ## travel to brush start
    {% if left_to_right %}
        _purginator_travel X={brush_start_LH} Y={brush_start_Y} {rawparams}
     {% else %}
        _purginator_travel X={brush_start_RH} Y={brush_start_Y} {rawparams}
    {% endif %}
    ## set fan to maximum
    M106 S255
    ## respond if configured
    {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 1 %}
        RESPOND TYPE=command MSG="🧽 Brushing nozzle "{wipes}" times with "{zigzags}" zigzags starting "{start} 
    {% endif %}
    ## brush nozzle according to parameters
    {% for wipe in range(0, (wipes)) %}
        {% if ( left_to_right and wipe%2 == 0 ) or ( not left_to_right and wipe%2 != 0 ) %}
            _purginator_travel X={brush_start_LH} Y={brush_start_Y} TRAVELSPEED={brush_speed} ACCEL={brush_accel} {rawparams}
            {% if zigzags != 0 %}
                {% for zigzag in range(0, (zigzags+1)) %}
                    {% set x = brush_LH + brush_x_width / zigzags * zigzag %}
                    {% if zigzag%2 == 0 %}
                        {% set y = brush_front %}
                    {% else %}
                        {% set y = brush_back %}
                    {% endif %}  
                    _purginator_travel X={x} Y={y} TRAVELSPEED={brush_speed} ACCEL={brush_accel} {rawparams}
                {% endfor %}
            {% endif %}
            _purginator_travel X={brush_start_RH} Y={brush_start_Y} TRAVELSPEED={brush_speed} ACCEL={brush_accel} {rawparams}
        {% else %}
            _purginator_travel X={brush_start_RH} Y={brush_start_Y} TRAVELSPEED={brush_speed} ACCEL={brush_accel} {rawparams}
            {% if zigzags != 0 %}
                {% for zigzag in range(0, (zigzags+1)) %}
                    {% set x = brush_RH - brush_x_width / zigzags * zigzag %}
                    {% if zigzag%2 == 0 %}
                        {% if zigzags%2 == 0 %}
                            {% set y = brush_back %}
                        {% else %}
                            {% set y = brush_front %}
                        {% endif %} 
                    {% else %}
                        {% if zigzags%2 == 0 %}
                            {% set y = brush_front %}
                        {% else %} 
                            {% set y = brush_back %}
                        {% endif %}   
                    {% endif %}  
                    _purginator_travel X={x} Y={y} TRAVELSPEED={brush_speed} ACCEL={brush_accel} {rawparams}
                {% endfor %}
            {% endif %} 
            _purginator_travel X={brush_start_LH} Y={brush_start_Y} TRAVELSPEED={brush_speed} ACCEL={brush_accel} {rawparams}
        {% endif %} 
    {% endfor %}
    ## restore original fanspeed
    M106 S{fanspeed}


[gcode_macro _PURGINATOR_CLEAN_NOZZLE]
description: Nozzle heat up and and repeatedly brush during cooldown
description: 
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_PURGINATOR_CLEAN_NOZZLE {rawparams}"
    {% endif %}
    {% set pvars = printer['gcode_macro _PURGINATOR_VARS'] %}
    {% if params.RESPOND|default(pvars.respond_detail_level)|int >= 4 %}
        RESPOND TYPE=command MSG="_PURGINATOR_CLEAN_NOZZLE {rawparams}"
    {% endif %}  
    _PURGINATOR_DOCK
    {% set original_extruder_target = printer.extruder.target %}
    _purginator_set_minimum_nozzle_temp
    G4 P500
    _PURGINATOR_RAPID_NOZZLE_COOLING
    G4 P500
    _purginator_set_original_nozzle_temp
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={original_extruder_target}
    

[gcode_macro _PURGINATOR_PREPARE_NOZZLE_FOR_PROBING]
description: Make sure nozzle is below probing temp and clean
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_PURGINATOR_PREPARE_NOZZLE_FOR_PROBING {rawparams}"
    {% endif %}
    {% set actual_nozzle_temp = printer.extruder.temperature %}
    {% set actual_nozzle_temp_target = printer.extruder.target %}
    {% set probing_temp = printer['gcode_macro _PURGINATOR_VARS'].probing_nozzle_temp %} 
    {% if actual_nozzle_temp_target > probing_temp %}
         {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 1 %}
            RESPOND TYPE=command MSG="🌡️ Nozzle temp target changed from "{actual_nozzle_temp_target}" to "{probing_temp}
        {% endif %}  
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={probing_temp}
    {% endif %} 
    {% if actual_nozzle_temp > probing_temp + 5 %}
        _PURGINATOR_RAPID_NOZZLE_COOLING TEMP={probing_temp}
    {% else %} 
        _PURGINATOR_BRUSH DOCK=1
    {% endif %} 
    _PURGINATOR_UNDOCK


[gcode_macro _PURGINATOR_RAPID_NOZZLE_COOLING]
description: Repeatedly brushes the nozzle until a given temperature is reached. This will keep the nozzle clean and make cooldown faster.
description: Add for example purginator_NOZZLE_COOLDOWN TEMP=100 in your print_end macro to have a perfectly clean nozzle for the next print.
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_PURGINATOR_RAPID_NOZZLE_COOLING {rawparams}"
    {% endif %}
    {% set cooldown_temp = params.TEMP|default(0)|int %}
    {% set actual_nozzle_temp = printer.extruder.temperature %}
    {% set actual_nozzle_temp_target = printer.extruder.target %}
    {% set fan_speed = printer["fan"].speed * 255|int %}
    {% if cooldown_temp < actual_nozzle_temp_target %}
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 1 %}
            RESPOND TYPE=command MSG="🌡️ Nozzle temp target changed from "{actual_nozzle_temp_target}" to "{cooldown_temp}
        {% endif %}  
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={cooldown_temp}
    {% endif %}
    {% if cooldown_temp < actual_nozzle_temp %}
        M106 S255 # Turn fan to maximum
        {% for wipe in range(1, 50) %}
            _purginator_rapid_nozzle_cooling_cycle MAX_TEMP={ [ cooldown_temp , printer['gcode_macro _PURGINATOR_VARS'].min_rapid_cooling_cycle_temp|int ]|max } N={wipe}
        {% endfor %}
        M106 S{fan_speed} # Set fan back to original setting
    {% endif %}


[gcode_macro _purginator_rapid_nozzle_cooling_cycle]
description: Performs a sequence of wipes if the nozzle temperature is above <params.MAX_TEMP>
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_rapid_nozzle_cooling_cycle {rawparams}"
    {% endif %}
    {% if printer.extruder.temperature > params.MAX_TEMP|float + 1 %}
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 1 %}
            {% if params.N|int <= 1 %}
                RESPOND TYPE=command MSG="🌡️ "{ printer.extruder.temperature | round (1) }" nozzle temp above "{params.MAX_TEMP | float }"  Initiating cooling cycle ..."
            {% else %}
                RESPOND TYPE=command MSG="🌡️ "{ printer.extruder.temperature | round (1) }" nozzle temp above "{params.MAX_TEMP | float }"  Repeating cooling cycle ..."
            {% endif %}
        {% endif %}
        _PURGINATOR_BRUSH WIPES=4 ZIGZAGS=1 STAY=1
        _PURGINATOR_BRUSH WIPES=1 ZIGZAGS=40 STAY=1
        _PURGINATOR_BRUSH WIPES=40 ZIGZAGS=0 STAY=1 DEPTH=100
        _PURGINATOR_BRUSH WIPES=1 ZIGZAGS=40 STAY=1
        _PURGINATOR_BRUSH WIPES=4 ZIGZAGS=1 STAY=1
        _PURGINATOR_BRUSH WIPES=3 ZIGZAGS=0 DOCK=1
        G4 P500
    {% endif %}


[gcode_macro _purginator_set_minimum_nozzle_temp]
description: Store nozzle temperature and set to minimum nozzle temperature
description: Wait for nozzle to reach min temperature
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_set_minimum_nozzle_temp {rawparams}"
    {% endif %}
    {% set current_temp_target = printer.extruder.target|float %} 
    {% set current_temp = printer.extruder.temperature|float %} 
    {% set min_temp = printer['gcode_macro _PURGINATOR_VARS'].minimum_nozzle_temp|float %} 
    {% if current_temp_target < min_temp %}
        ## Save current nozzle temp target
        SET_GCODE_VARIABLE MACRO=_purginator_set_original_nozzle_temp VARIABLE=saved_nozzle_target VALUE={current_temp_target}
        SET_GCODE_VARIABLE MACRO=_purginator_set_original_nozzle_temp VARIABLE=nozzle_target_saved VALUE={True}
        ## Set nozzle temp target to minimum temperature
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={min_temp}
        ## Report
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 1 %}
            RESPOND TYPE=command MSG="🌡️ Nozzle temp target changed from "{current_temp_target}" to "{min_temp}
        {% endif %}
    {% endif %}
    {% if current_temp < min_temp %} 
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 1 %}
            RESPOND TYPE=command MSG="💤 Waiting for nozzle temperature to reach "{min_temp}" °C"
        {% endif %}
        TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={min_temp - 1}
    {% endif %}


[gcode_macro _purginator_set_original_nozzle_temp]
description: Reset nozzle temperature to previously stored value
variable_saved_nozzle_target: 0
variable_nozzle_target_saved: False
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_set_original_nozzle_temp {rawparams}"
    {% endif %}
    {% if nozzle_target_saved %}
        ## set nozzle temp target to saved value
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={saved_nozzle_target}
        ## respond 
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 1 %}
            RESPOND TYPE=command MSG="🌡️ Nozzle temp target set back to "{saved_nozzle_target}" °C"
        {% endif %}
        ## wait for nozzle to reach temp if necessary
        {% if printer.extruder.temperature | float < saved_nozzle_target %} 
            ## respond
            {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 1 %}
                RESPOND TYPE=command MSG="💤 Waiting for nozzle temperature to reach "{saved_nozzle_target}" °C"
            {% endif %}
            TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={saved_nozzle_target - 1}
        {% endif %}
        {% set nozzle_target_saved = False %}
        {% set saved_nozzle_target = 0 %}
    {% endif %}

    
;
;  ___ _ _                    _      ___     _   _   _           
; | __(_) |__ _ _ __  ___ _ _| |_   / __|  _| |_| |_(_)_ _  __ _ 
; | _|| | / _` | '  \/ -_) ' \  _| | (_| || |  _|  _| | ' \/ _` |
; |_| |_|_\__,_|_|_|_\___|_||_\__|  \___\_,_|\__|\__|_|_||_\__, |
;                                                          |___/ 
;
[gcode_macro _PURGINATOR_CUT]
description: Cut the filament by pressing the Filametrix Mod lever.
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_PURGINATOR_CUT {rawparams}"
    {% endif %}
    ## Dock toolhead
    _PURGINATOR_DOCK {rawparams}
    ## Unretract filament
    _purginator_filament_retract {rawparams}
    ## Optional pre cut cooling cycle(s)
    {% for cycle in range(0, printer['gcode_macro _PURGINATOR_VARS'].pre_cut_cooling_cycles) %}
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
            RESPOND TYPE=command MSG="🔃 Filament cooling cycle "{cycle+1}" of "{printer['gcode_macro _PURGINATOR_VARS'].pre_cut_cooling_cycles}
        {% endif %}
       
        #G4 P{printer['gcode_macro _PURGINATOR_VARS'].pre_cut_cooling_dwell_time}
        _purginator_wait MILLIS={printer['gcode_macro _PURGINATOR_VARS'].pre_cut_cooling_dwell_time} {rawparams}
        
        _purginator_filament_unretract LENGTH={printer['gcode_macro _PURGINATOR_VARS'].pre_cut_cooling_pushback_length} SPEED={printer['gcode_macro _PURGINATOR_VARS'].pre_cut_cooling_extruder_speed} {rawparams}
        
        #G4 P{printer['gcode_macro _PURGINATOR_VARS'].pre_cut_cooling_dwell_time}
        _purginator_wait MILLIS={printer['gcode_macro _PURGINATOR_VARS'].pre_cut_cooling_dwell_time} {rawparams}
        
        _purginator_filament_retract SPEED={printer['gcode_macro _PURGINATOR_VARS'].pre_cut_cooling_extruder_speed} {rawparams}
    {% endfor %}
    ## Cut filament
    _depressor_cut {rawparams}
    ## Optional pushback of the tip residual into the hotend
    {% if printer['gcode_macro _PURGINATOR_VARS'].post_cut_pushback_length > 0 %} 
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
            RESPOND TYPE=command MSG="🖍️ Filament tip pushback "{printer['gcode_macro _PURGINATOR_VARS'].post_cut_pushback_length}" mm"
        {% endif %}
        _purginator_filament_unretract LENGTH={printer['gcode_macro _PURGINATOR_VARS'].post_cut_pushback_length}  {rawparams}
        _purginator_filament_retract  {rawparams}
    {% endif %}
    ## Mark Filament as changed and zero accumulated retraction
    _purginator_retract_clear_accumulated_retraction
    _purginator_purge_set_filament_changed

    
[gcode_macro _depressor_cut]
description: Servo/extruder move sequence to cut filament
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_depressor_cut {rawparams}"
    {% endif %}
    ## Deploy depressor
    _depressor_deploy {rawparams}
    ## respond
    {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 1 %}
        M400
        RESPOND TYPE=command MSG="🖍️ Filament tip cut off!"
    {% endif %}
    ## relative extrusion
    M83
    ## set release length
    {% set release_length = printer['gcode_macro _PURGINATOR_VARS'].cut_blade_release_dist | float %}
    ## Retract to release blade
    _purginator_filament_retract LENGTH={release_length} LIMIT_ADDENDUM={release_length} {rawparams}
    ## Retract depressor
    _depressor_retract {rawparams}
    ## Unretract
    _purginator_filament_unretract LENGTH={release_length} {rawparams}



[gcode_macro _depressor_retract]
description: Servo/extruder move sequence to cut filament
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_depressor_cut {rawparams}"
    {% endif %}
    _purginator_move_servo SERVO=depressor ANGLE={printer['gcode_macro _PURGINATOR_VARS'].depressor_servo_angle_retracted} {rawparams}
    {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
        M400
        RESPOND TYPE=command MSG="👍 depressor retracted"
    {% endif %}

    
[gcode_macro _depressor_deploy]
description: Servo/extruder move sequence to cut filament
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_depressor_cut {rawparams}"
    {% endif %}
    _purginator_move_servo SERVO=depressor ANGLE={printer['gcode_macro _PURGINATOR_VARS'].depressor_servo_angle_deployed} {rawparams}
    {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
        M400
        RESPOND TYPE=command MSG="👉 depressor deployed"
    {% endif %}


;  ___               _           
; | _ \_  _ _ _ __ _(_)_ _  __ _ 
; |  _/ || | '_/ _` | | ' \/ _` |
; |_|  \_,_|_| \__, |_|_||_\__, |
;              |___/       |___/ 
;

[gcode_macro _PURGINATOR_SLICER_PURGE_SETTINGS]
description: Store slicer parameters for use in purge volume calculation
description: Put following line in the machine start g-code of the slicer:
description: _PURGINATOR_SLICER_PURGE_SETTINGS PT=[enable_prime_tower] PV=[prime_volume]
variable_enable_prime_tower: False
variable_prime_volume:           0
gcode:
    {% set enable_prime_tower = params.PT | default ( 0 ) | int == 1 %}
    {% set prime_volume = params.PV | default (0)  %}
    RESPOND TYPE=command MSG="enable_prime_tower "{enable_prime_tower}
    RESPOND TYPE=command MSG="prime_volume "{prime_volume}
    SET_GCODE_VARIABLE MACRO=_PURGINATOR_SLICER_PURGE_SETTINGS VARIABLE=enable_prime_tower VALUE={ enable_prime_tower }
    SET_GCODE_VARIABLE MACRO=_PURGINATOR_SLICER_PURGE_SETTINGS VARIABLE=prime_volume VALUE={ prime_volume }


[gcode_macro _PURGINATOR_PURGE]
description: Purges a volume of <params.V> [mm^3] or a length of <params.L> [mm] of filament.
description: Default is variable_minimum_purge_volume if filament was not changed 
description: and variable_default_purge_volume if filament was chamged
variable_filament_changed: True
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_PURGINATOR_PURGE {rawparams}"
    {% endif %}
    ## respond begin of purging
    {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
        RESPOND TYPE=command MSG="🚽 Begin purging required amount of filament ..."
    {% endif %}
    ## Purge Volume requested by params.V
    {% if params.V %}
        _purginator_purge_set_purge_volume V={params.V|float}
    ## Purge Length requested by params.L
    {% elif params.L %}
        {% set filament_diameter = printer.configfile.config.extruder.filament_diameter|float %}
        {% set filament_cross_section = filament_diameter**2 * 0.7854 %}
        _purginator_purge_set_purge_volume V={params.L|float * filament_cross_section}
    ## Filament has changed
    {% elif filament_changed %}
        ## Use of Slicer Volumes enabled
        {% if printer['gcode_macro _PURGINATOR_VARS'].enable_mmu_purge_volumes_lookup %}
            {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
                RESPOND TYPE=command MSG="👀 Filament changed. Looking for Slicer Volume"
            {% endif %}
            _purginator_purge_set_slicer_volume
        ## Use of Slicer Volumes disabled
        {% else %}
            {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
                RESPOND TYPE=command MSG="👀 Filament changed. Using default purge volume."
            {% endif %}
            _purginator_purge_set_default_volume
        {% endif %}
        _purginator_purge_add_tip_volume
    ## Filament has not changed    
    {% else %}
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
            RESPOND TYPE=command MSG="👀 Filament not changed. Using minimum purge volume."
        {% endif %}
        _purginator_purge_set_minimum_volume
    {% endif %}
    ## deduct prime tower prime volume
    _purginator_purge_deduct_prime_volume
    ## execute purge
    _purginator_purge_execute_purge {rawparams}
    ## restet filament changes
    _purginator_purge_clear_filament_changed
    ## respond end of purging
    {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
        RESPOND TYPE=command MSG="🚽 Finished purging"
    {% endif %}


[gcode_macro _purginator_purge_execute_purge]
description: Purges requested amount of filament.
description: If requested volume exceeds the maximum purge volume multiple consecutive purges will be carried out.
variable_requested_purge_volume: 0
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_purge_execute_purge {rawparams}"
    {% endif %}
    {% set filament_cross_section = printer.configfile.config.extruder.filament_diameter|float ** 2 * 0.7854 %}
    {% set requested_volume = [params.VOLUME|default(requested_purge_volume)|float, (printer['gcode_macro _PURGINATOR_VARS'].minimum_purge_volume)|float]|max%}
    {% set purges = ( requested_volume / printer['gcode_macro _PURGINATOR_VARS'].maximum_purge_volume ) | int + 1 %} # required number  purges
    {% set purge_volume = requested_volume/purges %} # purge volume per purge
    {% set purge_length = purge_volume / filament_cross_section | float %} # purge length per purge
    {% set fast_length = [purge_length-printer['gcode_macro _PURGINATOR_VARS'].slow_purge_volume/filament_cross_section,0]|max|float %} # fast purge length
    {% set fast_speed = printer['gcode_macro _PURGINATOR_VARS'].fast_purge_speed|float %} # fast purge speed
    {% set slow_length = [purge_length, printer['gcode_macro _PURGINATOR_VARS'].slow_purge_volume/filament_cross_section]|min|float %} # slow purge length
    {% set slow_speed = printer['gcode_macro _PURGINATOR_VARS'].slow_purge_speed|float %} # slow purge speed
    ## to avoid hot filament sticking to the screw conveyor ensure minimum purge z height and extractor is turned off
    _purginator_travel Z={[printer.gcode_move.gcode_position.z, printer['gcode_macro _PURGINATOR_VARS'].minimum_purge_height]|max}
    _EXTRACTOR_OFF
    ## sync extruder and mmu motor
    mmu_sync_gear_motor
    ## make sure toolhead is docked to the purginator
    _PURGINATOR_DOCK
    ## set relative extrusion
    M83
    ## execute required number of purge cycles
    {% for purge in range(0, purges) %}
        ## report begin of purge cycle
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 1 %}
            RESPOND TYPE=command MSG="💩 Purge cycle "{purge+1}" of "{purges}" purging "{purge_length|round(2)}"mm or "{purge_volume|round(2)}" mm^3 of filament"
        {% endif %}
        ## unretract filament
        _purginator_filament_unretract
        ## respond fast purge
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 and fast_length > 0 %}
            RESPOND TYPE=command MSG="😡 fast purge "{fast_length|round(2)}" mm  v "{fast_speed}" ⏳ "{(fast_length/fast_speed)|round(2)}" s"
        {% endif %}
        ## execute slow purge
        G0 E{fast_length} F{fast_speed*60}
        ## finish moves
        M400
        ## respond slow purge
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
            RESPOND TYPE=command MSG="🥴 slow purge "{slow_length|round(2)}" mm  v "{slow_speed}" ⏳ "{(slow_length/slow_speed)|round(2)}" s"
        {% endif %}
        ## execute slow purge
        G0 E{slow_length} F{slow_speed*60}
        ## finish moves
        M400
        ## drop purged material
        {% if purge + 1 != purges %}
            _purginator_purge_eject
        {% else %}
            _purginator_purge_eject {rawparams}
        {% endif %}
    {% endfor %}
    ## reset purge volume
    _purginator_purge_reset_purge_volume


[gcode_macro _purginator_purge_set_minimum_volume]
description: Set requested purge volume to minimum purge volume.
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_purge_set_minimum_volume {rawparams}"
    {% endif %}
    _purginator_purge_set_purge_volume V={printer['gcode_macro _PURGINATOR_VARS'].minimum_purge_volume|float}


[gcode_macro _purginator_purge_set_default_volume]
description: Set requested purge volume to default purge volume.
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_purge_set_default_volume {rawparams}"
    {% endif %}
    _purginator_purge_set_purge_volume V={printer['gcode_macro _PURGINATOR_VARS'].default_purge_volume|float}


[gcode_macro _purginator_purge_set_slicer_volume]
description: Set requested purge volume to the relevant slicer volume map value.
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_purge_set_slicer_volume {rawparams}"
    {% endif %}
    ## Set Variables
    {% set from_tool = printer.mmu.last_tool %}
    {% set to_tool = printer.mmu.tool %}
    {% set purge_volumes = printer.mmu.slicer_tool_map.purge_volumes %}
    ## Slicer Volumes available
    {% if purge_volumes %} 
        ## toolchange from known tool to known tool  
        {% if (from_tool >= 0 and to_tool >= 0 and from_tool != to_tool ) %}
            {% set slicer_volume = purge_volumes[from_tool][to_tool]|float %}
            {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
                MMU_SLICER_TOOL_MAP PURGE_MAP=1
                RESPOND TYPE=command MSG="🔍 Slicer volume T"{from_tool}" -> T"{to_tool}" : "{slicer_volume}
            {% endif %}
        ## toolchange from unknown tool to known tool
        {% elif from_tool < 0 and to_tool >= 0 %}
            {% set slicer_volume = purge_volumes|map(attribute=to_tool)|max|float  %}
            {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
                MMU_SLICER_TOOL_MAP PURGE_MAP=1
                RESPOND TYPE=command MSG="🔍 Slicer volume ?? -> T"{to_tool}" : "{slicer_volume}
            {% endif %}
        ## toolchange to unknown tool    
        {% elif to_tool < 0 %}       
            {% set slicer_volume = purge_volumes|map('max')|max|float %}
            {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
                MMU_SLICER_TOOL_MAP PURGE_MAP=1
                RESPOND TYPE=command MSG="🔍 Slicer volume Tx -> ?? : "{slicer_volume}
            {% endif %}
        ## same filament loaded
        {% else %}
            {% set slicer_volume = 0|float %}
            {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
                MMU_SLICER_TOOL_MAP PURGE_MAP=1
                RESPOND TYPE=command MSG="🔍 Slicer Volume Tx -> Tx : 0.00 mm^3"
            {% endif %}
        {% endif %}
        _purginator_purge_set_purge_volume V={slicer_volume}
        _purginator_purge_apply_slicer_volumes_factor
        _purginator_purge_apply_minimum_volume
    ## Slicer Volumes not available
    {% else %}
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
            RESPOND TYPE=command MSG="🔍 No slicer volumes found. Using default purge volume."
        {% endif %}
        _purginator_purge_set_default_volume
    {% endif %}
      

[gcode_macro _purginator_purge_apply_slicer_volumes_factor]
description: Multiply purge volume with slicer volume factor
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_purge_apply_slicer_volumes_factor {rawparams}"
    {% endif %}
    {% set slicer_volumes_factor = printer['gcode_macro _PURGINATOR_VARS'].slicer_volumes_factor | float %}
    {% if slicer_volumes_factor != 1 %}
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
            RESPOND TYPE=command MSG="🪫 multiply by "{slicer_volumes_factor|round(2)}" slicer volumes factor"
        {% endif %}
        _purginator_purge_set_purge_volume V={ printer['gcode_macro _purginator_purge_execute_purge'].requested_purge_volume | float * slicer_volumes_factor }
    {% endif %}


[gcode_macro _purginator_purge_apply_minimum_volume]
description: Set purge volume to minimum purge volume if actual purge volume is below
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_purge_apply_minimum_volume {rawparams}"
    {% endif %}
    {% set min_purge_volume = printer['gcode_macro _PURGINATOR_VARS'].minimum_purge_volume|float %}
    {% set current_purge_volume = printer['gcode_macro _purginator_purge_execute_purge'].requested_purge_volume | float %}
    {% if current_purge_volume < min_purge_volume %}
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
            RESPOND TYPE=command MSG="🪫 Purge volume is too small -> changed to minimum purge volume"
        {% endif %}
        _purginator_purge_set_minimum_volume
    {% endif %}

    
[gcode_macro _purginator_purge_deduct_prime_volume]
description: Deduct prime tower prime volume if printing with prime tower
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_purge_deduct_prime_volume {rawparams}"
    {% endif %}
    {% if printer['gcode_macro _PURGINATOR_SLICER_PURGE_SETTINGS'].enable_prime_tower %}
        {% set prime_volume = printer['gcode_macro _PURGINATOR_SLICER_PURGE_SETTINGS'].prime_volume | float %}
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
            RESPOND TYPE=command MSG="🪫 substracting prime tower prime volume "{ prime_volume }
        {% endif %}
        _purginator_purge_set_purge_volume V={ printer['gcode_macro _purginator_purge_execute_purge'].requested_purge_volume | float - prime_volume }
    {% endif %}


[gcode_macro _purginator_purge_add_tip_volume]
description: Add tip residual volume to purge volume
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_purge_add_tip_volume {rawparams}"
    {% endif %}
    {% set filament_cross_section = printer.configfile.config.extruder.filament_diameter|float ** 2 * 0.7854 %}
    {% set tip_residual_volume = printer['gcode_macro _PURGINATOR_VARS'].tip_length|float * filament_cross_section %}
    {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
        RESPOND TYPE=command MSG="🪫 Adding "{tip_residual_volume|round(2)}" mm^3 to account for tip residual volume"
    {% endif %}
    _purginator_purge_set_purge_volume V={printer['gcode_macro _purginator_purge_execute_purge'].requested_purge_volume | float + tip_residual_volume }


[gcode_macro _purginator_purge_set_purge_volume]
description: Set requested purge volume to parameter value.
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_purge_set_purge_volume {rawparams}"
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_purginator_purge_execute_purge VARIABLE=requested_purge_volume VALUE={params.V|default(0)|float}
    {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
        RESPOND TYPE=command MSG="🪫 Purge volume set to "{params.V|default(0)|float|round(2)}" mm^3"
    {% endif %}


[gcode_macro _purginator_purge_eject]
description: Servo move sequence to eject purged filament
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_retract {rawparams}"
    {% endif %}
    ## move elevator servo down
    _purginator_elevator_servo_down {rawparams}
    ## move retractor servo to eject position to drop the purged material
    _purginator_retractor_servo_eject {rawparams}
    ## move retractor servo back to retract position 
    _purginator_retractor_servo_retract {rawparams}
    ## move retractor servo to eject position again
    _purginator_retractor_servo_eject {rawparams}
    ## move retractor servo back to deployed position
    _purginator_retractor_servo_deploy {rawparams}
    ## move elevator servo up
    _purginator_elevator_servo_up {rawparams}


[gcode_macro _purginator_purge_reset_purge_volume]
description: Reset purge volume
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_purge_reset_purge_volume {rawparams}"
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_purginator_purge_execute_purge VARIABLE=requested_purge_volume VALUE={0}
    {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 2 %}
        RESPOND TYPE=command MSG="🪫 Purge volume reset"
    {% endif %}


[gcode_macro _purginator_purge_set_filament_changed]
description: Test Toolchange 
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_purge_set_filament_changed {rawparams}"
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_PURGINATOR_PURGE VARIABLE=filament_changed VALUE={ True }


[gcode_macro _purginator_purge_clear_filament_changed]
description: Clear return position
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_purge_clear_filament_changed {rawparams}"
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_PURGINATOR_PURGE VARIABLE=filament_changed VALUE={ False }



;  __  __      _           _      _   ___     _               _   _          
; |  \/  |__ _| |_ ___ _ _(_)__ _| | | __|_ _| |_ _ _ __ _ __| |_(_)___ _ _  
; | |\/| / _` |  _/ -_) '_| / _` | | | _|\ \ /  _| '_/ _` / _|  _| / _ \ ' \ 
; |_|  |_\__,_|\__\___|_| |_\__,_|_| |___/_\_\\__|_| \__,_\__|\__|_\___/_||_|
;                                                                            
;
; For some reason it can happen that the extractor servo reverses direction (at least on my machine).
; This happens sporadically after a emergency stops or klipper updates.
; As if this wasn't strange enough, this condition persists after klipper restarts, firmware restarts and reboots.
; Only a power cycle will bring things back to normal.
; Having the servo running in the wrong direction causes the screw conveyor to jam when purged material reaches the front of the tray.
; This is particularily painful when (hopefully) noticed after a multi material print started.
; Should you (hopefully not) have this problem the otherwise completely useless _EXTRACTOR_REVERSE macro temporarily fixes the issue 
; until a power cycle is performed and can save you from having to cancel the print.


[gcode_macro _EXTRACTOR_EMPTY_TRAY]
description: Flush the Extractor
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_EXTRACTOR_EMPTY_TRAY {rawparams}"
    {% endif %}
    {% set delay = params.DURATION|default( printer['gcode_macro _PURGINATOR_VARS'].extractor_default_run_time ) | int %}
    _EXTRACTOR_ON
    UPDATE_DELAYED_GCODE ID=_EXTRACTOR_OFF_DELAYED DURATION={delay}


[delayed_gcode _EXTRACTOR_OFF_DELAYED]
gcode:
    _EXTRACTOR_OFF


[gcode_macro _EXTRACTOR_ON]
description: Turn on the extractor screw conveyor
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_EXTRACTOR_ON {rawparams}"
    {% endif %}
    {% if "z" in printer.toolhead.homed_axes %}
        {% set gpos = printer.gcode_move.gcode_position %} 
        _purginator_travel Z={[gpos.z, printer['gcode_macro _PURGINATOR_VARS'].minimum_purge_height]|max}
    {% endif  %}
    ## determine run agle
    {% if printer['gcode_macro _PURGINATOR_VARS'].extractor_servo_reverse %}
        {% set run_angle = printer['gcode_macro _PURGINATOR_VARS'].extractor_servo_angle_neutral|int + printer['gcode_macro _PURGINATOR_VARS'].extractor_servo_run_offset|int %}
    {% else %}
        {% set run_angle = printer['gcode_macro _PURGINATOR_VARS'].extractor_servo_angle_neutral|int - printer['gcode_macro _PURGINATOR_VARS'].extractor_servo_run_offset|int %}
    {% endif %}
    ## set servo to run angle
    SET_SERVO SERVO=extractor ANGLE={run_angle}
    {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 1 and printer["servo extractor"].value == 0%}
        RESPOND TYPE=command MSG="🌪️ Extractor ON"
    {% endif %}


[gcode_macro _EXTRACTOR_OFF]
description: Turn off the extractor screw conveyor
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_EXTRACTOR_OFF {rawparams}"
    {% endif %}
    #SET_SERVO SERVO=extractor ANGLE={printer['gcode_macro _PURGINATOR_VARS'].extractor_servo_angle_neutral|int}
    SET_SERVO SERVO=extractor WIDTH=0
    {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 1 and printer["servo extractor"].value != 0 %}
        RESPOND TYPE=command MSG="🌪️ Extractor OFF"
    {% endif %}


[gcode_macro _EXTRACTOR_REVERSE]
description: Reverse the extractor servo direction
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_EXTRACTOR_REVERSE {rawparams}"
    {% endif %}
    {% set extractor_servo_pos = printer["servo extractor"].value %} 
    {% if printer['gcode_macro _PURGINATOR_VARS'].extractor_servo_reverse %}
        SET_GCODE_VARIABLE MACRO=_PURGINATOR_VARS VARIABLE=extractor_servo_reverse VALUE=False
        RESPOND TYPE=command MSG="🙂 Extractor Conveyor direction NORMAL"  
    {% else %}
        SET_GCODE_VARIABLE MACRO=_PURGINATOR_VARS VARIABLE=extractor_servo_reverse VALUE=True
        RESPOND TYPE=command MSG="🙃 Extractor Conveyor direction REVERSED"  
    {% endif %}
    {% if printer["servo extractor"].value != 0 %}
        _EXTRACTOR_ON
    {% endif %}
;
;  _               _         __                  _   _                 
; | |             (_)       / _|                | | (_)                
; | |__   __ _ ___ _  ___  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___ 
; | '_ \ / _` / __| |/ __| |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
; | |_) | (_| \__ \ | (__  | | | |_| | | | | (__| |_| | (_) | | | \__ \
; |_.__/ \__,_|___/_|\___| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
;                                                                      
;
;  _            _ _                _   _                    _ 
; | |_ ___  ___| | |_  ___ __ _ __| | | |_ _ _ __ ___ _____| |
; |  _/ _ \/ _ \ | ' \/ -_) _` / _` | |  _| '_/ _` \ V / -_) |
;  \__\___/\___/_|_||_\___\__,_\__,_|  \__|_| \__,_|\_/\___|_|                                                             
;
[gcode_macro _purginator_travel]
description: Move toolhead to <params.X>, <params.Y>, <params.Z> coordinates at <params.TRAVELSPEED> velocity and <params.ACCEL>
description: Default TRAVELSPEED is set in purginator_vars.cfg variable_travel_speed
description: Default TRAVELSPEED is set in purginator_vars.cfg variable_travel_accel
description: Simultaneously retract filament at approximately <params.RETRACTSPEED> velocity (max to filament cut position)
description: Default RETRACTSPEED is 0 (simultaneous retract disabled) 
description: Simultaneously lift or descend gantry at approximately <params.LIFTSPEED> or <params.DESCENDSPEED> velocity
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_travel {rawparams}"
    {% endif %}
    ## Set variables
    {% set travel_speed = [ params.TRAVELSPEED|default(printer['gcode_macro _PURGINATOR_VARS'].travel_speed) | float, printer.configfile.settings.printer.max_velocity | float ] | min %}
    {% set travel_accel = [ params.ACCEL|default(printer['gcode_macro _PURGINATOR_VARS'].travel_acceleration) | float, printer.configfile.settings.printer.max_accel | float ] | min %}
    {% set retract_speed = params.RETRACTSPEED|default(0)|float %}
    {% set lift_speed = params.LIFTSPEED|default(0)|float %}
    {% set descend_speed = params.DESCENDSPEED|default(0)|float %}
    {% set remaining_retract_dist_to_cutpoint = printer['gcode_macro _PURGINATOR_VARS'].blade_pos|float - printer['gcode_macro _PURGINATOR_VARS'].tip_length|float - printer['gcode_macro _purginator_filament_retract'].accumulated_retraction|float %}
    ## Calculate x, y, z distances
    {% set from_x = printer.gcode_move.gcode_position.x|float %}
    {% set from_y = printer.gcode_move.gcode_position.y|float %}
    {% set from_z = printer.gcode_move.gcode_position.z|float %}
    {% set to_x = params.X|default(from_x)|float %}
    {% set to_y = params.Y|default(from_y)|float %}
    {% set to_z = params.Z|default(from_z)|float %}
    {% set dx = to_x - from_x %}
    {% set dy = to_y - from_y %}
    {% set dz = to_z - from_z %}
    ## Action required
    {% if dx != 0 or dy != 0 or dz != 0 %}
        SET_VELOCITY_LIMIT ACCEL={travel_accel}
        ## absolute positioning
        G90
        ## Travel with filament retraction and/or lift/descend
        {% if retract_speed > 0 and remaining_retract_dist_to_cutpoint > 0 or lift_speed > 0 or lift_speed > 0 %}
            M83
            ## Estimate minimum xy travel time if there is xy movement
            {% if dx != 0 or dy != 0  %}
                ## Set variables required for min xy travel time approximation
                {% set xy_speed = travel_speed %}
                {% set xy_accel = travel_accel %}
                {% set xy_min_cruise_ratio = printer.toolhead.minimum_cruise_ratio | float %}
                ## Calculate minimum xy travel time
                {% set xy_dist = (dx**2 + dy**2)**0.5 %} # mm
                {% set xy_full_accel_time = xy_speed / xy_accel %} # sec
                {% set xy_full_accel_dist = xy_accel * 0.5 * xy_full_accel_time**2 %} # mm
                {% set xy_avail_accel_dist = (xy_dist - xy_dist * xy_min_cruise_ratio) * 0.5 %} # mm
                {% set xy_accel_dist = [xy_full_accel_dist, xy_avail_accel_dist]|min %} # mm
                {% set xy_cruise_dist = xy_dist - 2 * xy_accel_dist %} # mm
                {% set xy_accel_time = xy_full_accel_time / xy_full_accel_dist * xy_accel_dist %} # sec
                {% set xy_cruise_speed = xy_accel * xy_accel_time  %} # mm/sec
                {% set xy_cruise_time = xy_cruise_dist / xy_cruise_speed %} # mm
                {% set xy_min_travel_time = xy_cruise_time + 2 * xy_accel_time %} # sec
            {% else %}
                {% set xy_min_travel_time = 0 %} # sec
            {% endif %}
            ## Add z travel towards minimum purge height if required and requested by parameter
            {% if lift_speed and dz == 0 and xy_min_travel_time != 0 %}
                {% set minimum_purge_height = printer['gcode_macro _PURGINATOR_VARS'].minimum_purge_height | float %}
                {% if from_z <  minimum_purge_height %}
                    {% set dz = [ lift_speed * xy_min_travel_time , minimum_purge_height - from_z ] | min %}
                    {% set to_z = to_z + dz %}
                {% endif %}
            ## Add z travel towards return position if required and requested by parameter
            {% elif descend_speed and dz == 0 and xy_min_travel_time != 0 %}
                {% set return_travel_height = printer['gcode_macro _PURGINATOR_RETURN'].return_travel_height | float %}
                {% if from_z >  return_travel_height %}
                    {% set dz = [ descend_speed * xy_min_travel_time , from_z - return_travel_height ] | min * -1 %}
                    {% set to_z = to_z + dz %}
                {% endif %}
            {% endif %}
            ## Estimate minimum z travel time if there is z movement
            {% if dz != 0 %}
                ## Set variables required for min z travel time approximation
                {% set z_speed = [ (travel_speed)|float, (printer.configfile.settings.printer.max_z_velocity)|float ]|min %}
                {% set z_accel = printer.configfile.config.printer.max_z_accel|float %}
                {% set z_min_cruise_ratio = 0 %}
                ## Calculate minimum z travel time
                {% set z_dist = dz|abs %}
                {% set z_full_accel_time = z_speed / z_accel  %}
                {% set z_full_accel_dist = z_accel * 0.5 * z_full_accel_time**2 %}
                {% set z_avail_accel_dist = (z_dist - z_dist * z_min_cruise_ratio) * 0.5 %} # mm
                {% set z_accel_dist = [z_full_accel_dist, z_avail_accel_dist]|min %}
                {% set z_cruise_dist = z_dist - 2 * z_accel_dist %}
                {% set z_accel_time = z_full_accel_time / z_full_accel_dist * z_accel_dist %}
                {% set z_cruise_speed = z_accel * z_accel_time  %}
                {% set z_cruise_time = z_cruise_dist / z_cruise_speed %}
                {% set z_min_travel_time = z_cruise_time + 2 * z_accel_time %}
            {% else %}
                {% set z_min_travel_time = 0 %}
            {% endif %}
            ## Calculate travel time and retract length
            {% set travel_time = ([xy_min_travel_time, z_min_travel_time]|max)|round(2) %} # sec
            {% set possible_retract_length =  (retract_speed * travel_time)|round(2) %} # mm
            {% set retract =  [possible_retract_length, remaining_retract_dist_to_cutpoint]|min %} # mm
            ## Move
            G0 X{to_x} Y{to_y} Z{to_z} E-{retract} F{travel_speed*60}
            ## update accumulated retraction
            SET_GCODE_VARIABLE MACRO=_purginator_filament_retract VARIABLE=accumulated_retraction VALUE={printer['gcode_macro _purginator_filament_retract'].accumulated_retraction+retract}
            ## Report
            {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 3 %}
                {% set millis = (travel_time*1000)|int %}
                RESPOND TYPE=command MSG="🏃‍♂️‍➡️ Δx "{dx|round(2)}" Δy "{dy|round(2)}" Δz "{dz|round(2)}" ⏳ "{(millis)}" ⚙️⬆⚙️ "{retract|round(2)}" tp "{(printer['gcode_macro _purginator_filament_retract'].accumulated_retraction+retract)|round(2)}
            {% endif %}
        ## Travel without filament retraction skipping travel time estimation
        {% else %}
            ## Move
            G0 X{to_x} Y{to_y} Z{to_z} F{travel_speed*60}
            ## Report
            {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 3 %}
                RESPOND TYPE=command MSG="🏃‍♂️‍➡️ Δx "{dx|round(2)}" Δy "{dy|round(2)}" Δz "{dz|round(2)}" speed "{travel_speed|round(2)}" accel "{travel_accel|int}
            {% endif %}
        {% endif %}
    {% endif %}
;
;
;          _               _      __ _ _                    _   
;  _ _ ___| |_ _ _ __ _ __| |_   / _(_) |__ _ _ __  ___ _ _| |_ 
; | '_/ -_)  _| '_/ _` / _|  _| |  _| | / _` | '  \/ -_) ' \  _|
; |_| \___|\__|_| \__,_\__|\__| |_| |_|_\__,_|_|_|_\___|_||_\__|
;                                                               
[gcode_macro _purginator_filament_retract]
description: Retract <params.LENGTH> mm of filament at <params.SPEED> to a maximum of the reqired distance for cutting
description: Default LENGTH is the actual remaining length to cut point
description: Default SPEED is set in purginator_vars.cfg variable_extruder_move_speed
variable_accumulated_retraction: 0
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_filament_retract {rawparams}"
    {% endif %}
    {% set max_retract = printer['gcode_macro _PURGINATOR_VARS'].blade_pos | float - printer['gcode_macro _PURGINATOR_VARS'].tip_length | float - accumulated_retraction + params.LIMIT_ADDENDUM | default (0) | float %}
    {% set retract = [ params.LENGTH | default(max_retract) | float, max_retract ] | min %}
    {% set retract_speed = params.SPEED | default( printer['gcode_macro _PURGINATOR_VARS'].extruder_move_speed ) | float %}
    {% set liftspeed = params.LIFTSPEED | default( 0 ) | float %}
    {% set remaining_lift_dist =[ printer['gcode_macro _PURGINATOR_VARS'].minimum_purge_height | float - printer.gcode_move.gcode_position.z , 0 ] | max %}
    ## action required
    {% if retract > 0 and retract_speed > 0 %}
        ## relative extrusion
        M83
        ## retract with z lift
        {% if liftspeed > 0 and remaining_lift_dist > 0 %}
            ## absolute positioning
            G90
            ## calculate lift distance
            {% set retract_time = retract / retract_speed %}
            {% set z_speed = liftspeed %}
            {% set z_accel = printer.configfile.config.printer.max_z_accel | float %}
            {% set full_speed_accel_time = ( liftspeed / z_accel ) %}
            {% set full_speed_accel_dist = z_accel * 0.5 * full_speed_accel_time ** 2  %}
            {% set accel_time = [ retract_time * 0.5 , full_speed_accel_time ] | min %}
            {% set accel_dist = z_accel * 0.5 * accel_time ** 2 %}
            {% set cruise_time = [ retract_time - 2 * accel_time , 0 ] | max %}
            {% set cruise_speed = accel_time * z_accel %}
            {% set cruise_dist = cruise_time * cruise_speed %}
            {% set z_move_length = cruise_dist + 2 * accel_dist %}
            ## carry out combines move
            {% if z_move_length > remaining_lift_dist  %}
                ## respond
                {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 3 %}
                    RESPOND TYPE=command MSG="🏃‍♂️‍➡️ Δz "{remaining_lift_dist | round(2)}" z "{(printer.gcode_move.gcode_position.z + remaining_lift_dist)|round(2)}" ⚙️⬆⚙️ "{retract|round(2)}" mm. Speed: "{(retract_speed)|round(2)}" ⏳ "{(retract/retract_speed*1000)|int}" tp "{(accumulated_retraction + retract)|round(2)}
                {% endif %}
                ## execute retract with gantry lift, limiting factor is retract
                G0 Z {printer.gcode_move.gcode_position.z + remaining_lift_dist} E-{retract} F{retract_speed*60}
            {% else %}
                ## respond
                {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 3 %}
                    RESPOND TYPE=command MSG="🏃‍♂️‍➡️ Δz "{z_move_length | round(2)}" z "{(printer.gcode_move.gcode_position.z + z_move_length)|round(2)}" ⚙️⬆⚙️ "{retract|round(2)}" mm. Speed: "{(retract_speed)|round(2)}" ⏳ "{(retract/retract_speed*1000)|int}" tp "{(accumulated_retraction + retract)|round(2)}
                {% endif %}
                ## execute retract with gantry lift, limiting factor is lift
                G0 Z {printer.gcode_move.gcode_position.z + z_move_length} E-{retract} F{liftspeed*60}
            {% endif %}
        ## retract without z lift
        {% else %}
            G0 E-{retract} F{retract_speed*60}
            ## respond
            {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 3 %}
                RESPOND TYPE=command MSG="⚙️⬆⚙️ "{ retract | round(2) }" mm. Speed: "{ ( retract_speed ) | round(2) }" ⏳ "{(retract/retract_speed*1000)|int}" tp "{(accumulated_retraction + retract)|round(2)}
            {% endif %}
        {% endif %}
        ## update accumulated retraction
        SET_GCODE_VARIABLE MACRO=_purginator_filament_retract VARIABLE=accumulated_retraction VALUE={accumulated_retraction + retract}
    {% endif %}


[gcode_macro _purginator_retract_clear_accumulated_retraction]
description: Clear accumulated Retraction
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_retract_clear_accumulated_retraction {rawparams}"
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_purginator_filament_retract VARIABLE=accumulated_retraction VALUE=0


;                    _               _      __ _ _                    _   
;  _  _ _ _  _ _ ___| |_ _ _ __ _ __| |_   / _(_) |__ _ _ __  ___ _ _| |_ 
; | || | ' \| '_/ -_)  _| '_/ _` / _|  _| |  _| | / _` | '  \/ -_) ' \  _|
;  \_,_|_||_|_| \___|\__|_| \__,_\__|\__| |_| |_|_\__,_|_|_|_\___|_||_\__|
;                                                                         
[gcode_macro _purginator_filament_unretract]
description: Unretract <params.LENGTH> mm of filament at <params.SPEED> to a maximum of previously accumulated retraction
description: Default LENGTH is the actual remaining length to nozzle tip
description: Default SPEED is set in purginator_vars.cfg variable_extruder_move_speed
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_filament_unretract {rawparams}"
    {% endif %}
    {% set accumulated_retraction = printer['gcode_macro _purginator_filament_retract'].accumulated_retraction|float %}
    {% set addendum = printer['gcode_macro _PURGINATOR_VARS'].return_unretract_addendum|float %}
    {% set unretract = [params.LENGTH|default(accumulated_retraction + addendum)|float, accumulated_retraction + addendum]|min %}
    {% set unretract_speed = params.SPEED|default(printer['gcode_macro _PURGINATOR_VARS'].extruder_move_speed)|float %}
    {% set liftspeed = params.LIFTSPEED | default( 0 ) | float %}
    {% set remaining_lift_dist =[ printer['gcode_macro _PURGINATOR_VARS'].minimum_purge_height | float - printer.gcode_move.gcode_position.z , 0 ] | max %}
    ## action required
    {% if unretract > 0 and unretract_speed > 0 %}
      ## relative extrusion
        M83
        ## unretract with z lift
        {% if liftspeed > 0 and remaining_lift_dist > 0 %}
            ## absolute positioning
            G90
            ## calculate lift distance
            {% set unretract_time = unretract / unretract_speed %}
            {% set z_speed = liftspeed %}
            {% set z_accel = printer.configfile.config.printer.max_z_accel | float %}
            {% set full_speed_accel_time = ( liftspeed / z_accel ) %}
            {% set full_speed_accel_dist = z_accel * 0.5 * full_speed_accel_time ** 2  %}
            {% set accel_time = [ unretract_time * 0.5 , full_speed_accel_time ] | min %}
            {% set accel_dist = z_accel * 0.5 * accel_time ** 2 %}
            {% set cruise_time = [ unretract_time - 2 * accel_time , 0 ] | max %}
            {% set cruise_speed = accel_time * z_accel %}
            {% set cruise_dist = cruise_time * cruise_speed %}
            {% set z_move_length = cruise_dist + 2 * accel_dist %}
            ## carry out combines move
            {% if z_move_length > remaining_lift_dist  %}
                ## respond
                {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 3 %}
                    RESPOND TYPE=command MSG="🏃‍♂️‍➡️ Δz "{remaining_lift_dist | round(2)}" z "{(printer.gcode_move.gcode_position.z + remaining_lift_dist)|round(2)}" ⚙️⬇⚙️ "{unretract|round(2)}" mm. Speed: "{(unretract_speed)|round(2)}" ⏳ "{(unretract/unretract_speed*1000)|int}" tp "{ [ accumulated_retraction - unretract , 0 ] | max | round(2) }
                {% endif %}
                ## execute unretract with gantry lift, limiting factor is unretract
                G0 Z {printer.gcode_move.gcode_position.z + remaining_lift_dist} E{unretract} F{unretract_speed*60}
            {% else %}
                ## respond
                {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 3 %}
                    RESPOND TYPE=command MSG="🏃‍♂️‍➡️ Δz "{z_move_length | round(2)}" z "{(printer.gcode_move.gcode_position.z + z_move_length)|round(2)}" ⚙️⬇⚙️ "{unretract|round(2)}" mm. Speed: "{(unretract_speed)|round(2)}" ⏳ "{(unretract/unretract_speed*1000)|int}" tp "{ [ accumulated_retraction - unretract , 0 ] | max | round(2) }
                {% endif %}
                ## execute unretract with gantry lift, limiting factor is lift
                G0 Z {printer.gcode_move.gcode_position.z + z_move_length} E{unretract} F{liftspeed*60}
            {% endif %}
        ## unretract without z lift
        {% else %}
            G0 E{unretract} F{unretract_speed*60}
            ## respond
            {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 3 %}
                RESPOND TYPE=command MSG="⚙️⬇⚙️ "{unretract|round(2)}" mm. Speed: "{(unretract_speed)|round(2)}" ⏳ "{(unretract/unretract_speed*1000)|int}" tp "{ [ accumulated_retraction - unretract , 0 ] | max | round(2) }
            {% endif %}
        {% endif %}
        ## update accumulated retraction
        SET_GCODE_VARIABLE MACRO=_purginator_filament_retract VARIABLE=accumulated_retraction VALUE={ [ accumulated_retraction - unretract , 0 ] | max }
    {% endif %}
;
;                                             
;  _ __  _____ _____   ___ ___ _ ___ _____ ___
; | '  \/ _ \ V / -_) (_-</ -_) '_\ V / _ (_-<
; |_|_|_\___/\_/\___| /__/\___|_|  \_/\___/__/
;
[gcode_macro _purginator_move_servo]
description: Set <params.SERVO> to <params.ANGLE>, estimate move duration and wait for servo travel to finish
description: <params.SKIP_WAIT> set true supresses waiting
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_move_servo {rawparams}"
    {% endif %}
    ## set servo string
    {% set servo = "servo " ~ params.SERVO %}
    ## retrieve servo settings 
    {% set min_pulse_width = printer.configfile.settings[servo].minimum_pulse_width | float %}
    {% set max_pulse_width = printer.configfile.settings[servo].maximum_pulse_width | float %}
    {% set max_servo_angle = printer.configfile.settings[servo].maximum_servo_angle | float %}
    ## retrieve servo speed
    {% set servo_speed = 0 %}
    {% if params.SERVO | lower == "retractor" %}
        {% set servo_speed = printer['gcode_macro _PURGINATOR_VARS'].retractor_servo_speed | float %}
    {% elif params.SERVO | lower  == "elevator" %}
        {% set servo_speed = printer['gcode_macro _PURGINATOR_VARS'].elevator_servo_speed | float %}
    {% elif params.SERVO | lower  == "depressor" %}
        {% set servo_speed = printer['gcode_macro _PURGINATOR_VARS'].depressor_servo_speed | float %}
    {% endif %}
    ## servo exists
    {% if servo_speed > 0 %}
        ## find out current servo angle
        {% set current_servo_pos = printer[servo].value %} 
        {% set base = min_pulse_width * 50 %}
        {% set width_per_degree = (max_pulse_width * 50 - min_pulse_width * 50) / max_servo_angle %}
        {% if  current_servo_pos != 0 %}
            {% set current_servo_angle = ((current_servo_pos-base)/width_per_degree) | round(2) %}
        {% else %}
            {% set current_servo_angle = printer.configfile.settings[servo].initial_angle | float %}
        {% endif %}
        ## calculate servo move duration
        {% set target_servo_angle = params.ANGLE | float %}
        {% set move_duration = ( servo_speed / max_servo_angle * ( current_servo_angle - target_servo_angle ) ) | int | abs %}
        ## current pos is different from target pos
        {% if  current_servo_angle != target_servo_angle %}
            ## set requested servo to requested position
            SET_SERVO SERVO={params.SERVO} ANGLE={target_servo_angle}
            ## respond 
            {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 3 %}
                RESPOND TYPE=command MSG="🎚️ "{params.SERVO}" servo angle set from "{current_servo_angle}" to "{target_servo_angle}" Move will take "{move_duration | int}" ms"
            {% endif %}
            {% if not params.SKIP_WAIT|default(False) %}
                _purginator_wait MILLIS={move_duration} RETRACTSPEED={params.RETRACTSPEED|default(0)} LIFTSPEED={params.LIFTSPEED|default(0)} DESCENDSPEED={params.DESCENDSPEED|default(0)}
            {% endif %}
        {% endif %}
    ## servo does not exist
    {% else %}
        RESPOND TYPE=error MSG="{servo} unknown"
    {% endif %}
;
;              _ _   
; __ __ ____ _(_) |_ 
; \ V  V / _` | |  _|
;  \_/\_/\__,_|_|\__|
;
[gcode_macro _purginator_wait]
description: Wait for <params.MILLIS> milliseconds for servo movement to finish
description: If params.LIFTSPEED    > 0 : gantry movement towards min purge height will be carried out at this speed for the same amount of time instead of waiting 
description: If params.DESCENDSPEED > 0 : gantry movement towards park/return travel height will be carried out at this speed for the same amount of time instead of waiting
description: If params.RETRACTSPEED > 0 : filament retraction towards filament cutpoint will be carried out at this speed for the same amount of time instead of waiting 
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_wait {rawparams}"
    {% endif %}
    ## set time to kill
    {% set time_to_kill = params.MILLIS|default(0)|float / 1000 %}
    ## time to kill is greater than 0
    {% if time_to_kill > 0 %}
        ## respond beginning of macro
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 3 %}
            RESPOND TYPE=command MSG="⏱️ Waiting for servo move to finish ..."
        {% endif %}
        ## acquire parameters of ongoing z move or retraction
        {% if params.LIFTSPEED | default (0) | float > 0 %}
            {% set z_speed = [ ( params.LIFTSPEED ) | float, ( printer.configfile.settings.printer.max_z_velocity ) | float ] | min %}
            {% set remaining_z_dist = [ printer['gcode_macro _PURGINATOR_VARS'].minimum_purge_height | float - printer.gcode_move.gcode_position.z | float, 0 ] | max %}
            {% set direction = 1 %}
        {% elif params.DESCENDSPEED | default (0) | float > 0 %}
            {% set z_speed = [ ( params.DESCENDSPEED ) | float, ( printer.configfile.settings.printer.max_z_velocity ) | float ] | min %}
            {% set remaining_z_dist =[ printer.gcode_move.gcode_position.z - printer['gcode_macro _PURGINATOR_RETURN'].return_travel_height | float, 0 ] | max %}
            {% set direction = -1 %}
        {% else %}
            {% set z_speed = 0 %}
        {% endif %}
        {% set retract_speed = params.RETRACTSPEED | default (0) | float %}
        {% set accumulated_retraction = printer['gcode_macro _purginator_filament_retract'].accumulated_retraction | float %}
        {% set remaining_retract_dist = printer['gcode_macro _PURGINATOR_VARS'].blade_pos | float - printer['gcode_macro _PURGINATOR_VARS'].tip_length | float - accumulated_retraction %}
        ## ongoing z move
        {% if  z_speed > 0 and remaining_z_dist > 0 %}
            ## Calculate time to kill distance (z move length which takes time to kill to finish)
            {% set z_accel = printer.configfile.config.printer.max_z_accel | float %}
            {% set full_speed_accel_time = ( z_speed / z_accel ) %}
            {% set full_speed_accel_dist = z_accel * 0.5 * full_speed_accel_time ** 2  %}
            {% set accel_time = [ time_to_kill * 0.5 , full_speed_accel_time ] | min %}
            {% set accel_dist = z_accel * 0.5 * accel_time ** 2 %}
            {% set cruise_time = [ time_to_kill - 2 * accel_time , 0 ] | max %}
            {% set cruise_speed = accel_time * z_accel %}
            {% set cruise_dist = cruise_time * cruise_speed %}
            {% set time_to_kill_dist = cruise_dist + 2 * accel_dist%}
            ## Compare with remaining distance to target, choose the smaller for actual z move distance
            {% set ACTUAL_DIST = [ time_to_kill_dist, remaining_z_dist ] | min %}
            ## Calculate actual z move duration and possible remaining time
            {% if time_to_kill_dist > remaining_z_dist %}
                {% set actual_accel_dist = [ ACTUAL_DIST * 0.5 , z_accel * 0.5 * full_speed_accel_time ** 2 ] | min %}
                {% set actual_accel_time = ( actual_accel_dist / z_accel * 2 ) ** 0.5  %}  
                {% set actual_cruise_dist = ACTUAL_DIST - 2 * actual_accel_dist %}   
                {% set actual_cruise_speed = actual_accel_time * z_accel %}  
                {% set actual_cruise_time = actual_cruise_dist / actual_cruise_speed %} 
                {% set ACTUAL_TIME = actual_cruise_time + 2 * actual_accel_time %}
                {% set REMAINING_TIME =  time_to_kill - ACTUAL_TIME %}
            {% else %}
                {% set ACTUAL_TIME = time_to_kill %}
                {% set REMAINING_TIME = 0 %}
            {% endif %}
            ## If there is also ongoing retraction calculate retraction for actual z move
            {% if retract_speed > 0 and remaining_retract_dist > 0 %}
                {% set retract =  [retract_speed * ACTUAL_TIME, remaining_retract_dist]|min %} # mm
            {% else %}
                {% set retract = 0 %}
            {% endif %}
            ## respond calculated z move with calculated retraction
            {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 3 %}
                RESPOND TYPE=command MSG="⏳ spending "{ ( ACTUAL_TIME * 1000 ) | round(0) | int }" ms moving Δz "{(ACTUAL_DIST * direction)|round(2)}" v "{z_speed}" retracting "{ retract | round(2)}" v "{ ( retract / ACTUAL_TIME ) | round(2) }" tp "{ ( accumulated_retraction + retract ) | round(2) }
            {% endif %}
            ## execute calculated z move with calculated retraction 
            G0 Z{printer.gcode_move.gcode_position.z + ACTUAL_DIST * direction} E-{ retract } F{ z_speed * 60 } 
            ## remaining time after z move. retraction ongoing and unfinished.
            {% if REMAINING_TIME > 0 and remaining_retract_dist - retract > 0 %}
                ## calculate additional retract
                {% set additional_retract = [ retract_speed * REMAINING_TIME , remaining_retract_dist - retract ] | min %}
                {% set additional_retract_speed = additional_retract / REMAINING_TIME %}
                ## respond additional retraction of filament
                {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 3 %}
                    RESPOND TYPE=command MSG="⏳ spending "{ ( REMAINING_TIME * 1000 ) | round(0) | int }" ms retracting "{ additional_retract | round(2)}" v "{ additional_retract_speed | round(2) }" tp "{ ( accumulated_retraction + retract + additional_retract ) | round(2) }
                {% endif %}
                ## execute additional retracttion
                G0 E-{additional_retract} F{additional_retract_speed*60} 
            ## remaining time after z move. retraction finished or not ongoing
            {% elif REMAINING_TIME > 0 %}
                ## wait
                {% set additional_retract = 0 %}
                ## respond wait
                {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 3 %}
                    RESPOND TYPE=command MSG="⏳ spending "{ ( REMAINING_TIME * 1000 ) | int }" ms doing nothing"
                {% endif %}
                ## execute wait
                G4 P{ ( REMAINING_TIME * 1000 ) | int } 
            ## no remaining time to kill after z move
            {% else %}
                {% set additional_retract = 0 %}
            {% endif %}
            ## update accumulated retraction
            SET_GCODE_VARIABLE MACRO=_purginator_filament_retract VARIABLE=accumulated_retraction VALUE={ accumulated_retraction + retract + additional_retract }
        ## no ongoing z move but ongoing retraction 
        {% elif retract_speed > 0 and remaining_retract_dist > 0 %}
            {% set LENGTH =  [retract_speed * time_to_kill, remaining_retract_dist]|min %}
            {% set SPEED =  LENGTH / time_to_kill %}
            ## respond retraction
            {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 3 %}
                RESPOND TYPE=command MSG="⏳ "{ ( time_to_kill * 1000 ) | round(0) | int }" retract "{ LENGTH | round(2) }" v "{ SPEED | round(2) }" tp "{ ( accumulated_retraction + LENGTH ) | round(2) }
            {% endif %}
            ## execute retraction
            G0 E-{ LENGTH } F{ SPEED * 60 } 
            ## update accumulated retraction
            SET_GCODE_VARIABLE MACRO=_purginator_filament_retract VARIABLE=accumulated_retraction VALUE={ accumulated_retraction + LENGTH }
        ## no ongoing z move or retraction 
        {% else %}
            ## respond wait
            {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 3 %}
                RESPOND TYPE=command MSG="⏳ spending "{ params.MILLIS }" ms doing nothing"
            {% endif %}
            ## execute wait
            G4 P{ params.MILLIS } 
        {% endif %}
        ## respond end of macro
        {% if params.RESPOND|default(printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level)|int >= 3 %}
            RESPOND TYPE=command MSG="⏱️ ... servo move finished ( "{ params.MILLIS }" ms passed)"
        {% endif %}
        ## ensure at leats 1 ms of G4 waittime after moves which makes the difference of this macro working or not :-) 
        G4 P1 
    {% endif %}
;
;      _   _            
;  ___| |_| |_  ___ _ _ 
; / _ \  _| ' \/ -_) '_|
; \___/\__|_||_\___|_|  
;                       
[gcode_macro _purginator_autohome_xy]
description: Home xy if not homed, otherwise do nothing
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_autohome_xy {rawparams}"
    {% endif %}
    {% if "xy" not in printer.toolhead.homed_axes %}
        G28 XY
    {% endif %}


[gcode_macro _purginator_autohome_xyz]
description: Home xy if not homed, home z if not homed, otherwise do nothing
gcode:
    ## respond macroname incl. parameters for debugging
    {% if printer['gcode_macro _PURGINATOR_VARS'].show_issued_commands %}
        RESPOND TYPE=command MSG="_purginator_autohome_xyz {rawparams}"
    {% endif %}
    {% if "xy" not in printer.toolhead.homed_axes %}
        G28
    {% elif "z" not in printer.toolhead.homed_axes %}
        G28 Z
    {% endif  %}


[gcode_macro _more_info]
description: Temporarily increase respond level
gcode:
    {% set pvars = printer['gcode_macro _PURGINATOR_VARS'] %}
    {% set new_value = [pvars.respond_detail_level|int + 1, 4]|min %}
    SET_GCODE_VARIABLE MACRO=_PURGINATOR_VARS VARIABLE=respond_detail_level VALUE={new_value}


[gcode_macro _less_info]
description: Decrease respond level
gcode:
    {% set pvars = printer['gcode_macro _PURGINATOR_VARS'] %}
    {% set new_value = [pvars.respond_detail_level|int - 1, 0]|max %}
    SET_GCODE_VARIABLE MACRO=_PURGINATOR_VARS VARIABLE=respond_detail_level VALUE={new_value}


[gcode_macro _test_toolchange]
description: Test configured toolchange without filament
gcode:
    {% set current_respond_detail_level = printer['gcode_macro _PURGINATOR_VARS'].respond_detail_level %} 
    SET_GCODE_VARIABLE MACRO=_PURGINATOR_VARS VARIABLE=respond_detail_level VALUE=0
    ## prerequisites
    SET_PIN PIN=Caselight VALUE=1.00
    mmu_home
    mmu_eject
    _purginator_autohome_xyz
    _purginator_undock
    _purginator_travel x={params.X|default(175)} y={params.Y|default(175)} z={params.Z|default(5)}
    SET_GCODE_VARIABLE MACRO=_PURGINATOR_VARS VARIABLE=respond_detail_level VALUE=3
    ## toolchange sequence
    RESPOND TYPE=command MSG="PRE UNLOAD"
    _PURGINATOR_HAPPY_PRE_UNLOAD PRINTING=True
    RESPOND TYPE=command MSG="TIP FORMING"
    _PURGINATOR_HAPPY_FORM_TIP_MACRO PRINTING=True
    RESPOND TYPE=command MSG="FILAMENT UNLOADING ..."
    G4 P500 # wait
    RESPOND TYPE=command MSG="POST UNLOAD"
    _PURGINATOR_HAPPY_POST_UNLOAD PRINTING=True
    RESPOND TYPE=command MSG="PRE LOAD"
    _PURGINATOR_HAPPY_PRE_LOAD PRINTING=True
    RESPOND TYPE=command MSG="FILAMENT LOADING ..."
    G4 P500 # wait
    RESPOND TYPE=command MSG="POST LOAD"
    _PURGINATOR_HAPPY_POST_LOAD PRINTING=True
    ## restore configured respond detail level
    SET_GCODE_VARIABLE MACRO=_PURGINATOR_VARS VARIABLE=respond_detail_level VALUE={current_respond_detail_level}
