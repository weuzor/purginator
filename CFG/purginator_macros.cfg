#####################################################
# PURGINATOR MACROS
#####################################################


[gcode_macro PURGINATOR_DOCK]
description: Move the printhead to purge position and dock the purginator to the nozzle
gcode:
  SAVE_GCODE_STATE NAME=puginator_dock
  {% set pvars = printer['gcode_macro _PURGINATOR_VARS'] %}
  {% set homed = "xy" in printer.toolhead.homed_axes %}
  {% set gpos = printer.gcode_move.gcode_position %}
  {% set tpos = printer.toolhead.position %}
  {% set retractor_base = pvars.retractor_servo_minimum_pulse_width * 50 %}
  {% set retractor_width = pvars.retractor_servo_maximum_pulse_width * 50 - pvars.retractor_servo_minimum_pulse_width * 50 %}
  {% set retractor_increment = retractor_width / pvars.retractor_servo_maximum_angle %}
  {% set retractor_servo_pos = printer["servo retractor"].value %} 
  {% set retractor_servo_angle = ((retractor_servo_pos-retractor_base)/retractor_increment)|round(0)|int %}
  {% set elevator_base = pvars.elevator_servo_minimum_pulse_width * 50 %}
  {% set elevator_width = pvars.elevator_servo_maximum_pulse_width * 50 - pvars.elevator_servo_minimum_pulse_width * 50 %}
  {% set elevator_increment = elevator_width / pvars.elevator_servo_maximum_angle %}
  {% set elevator_servo_pos = printer["servo elevator"].value %} 
  {% set elevator_servo_angle = ((elevator_servo_pos-elevator_base)/elevator_increment)|round(0)|int %}
  {% set deployed = elevator_servo_angle == pvars.elevator_servo_angle_up and retractor_servo_angle == pvars.retractor_servo_angle_deployed %}
  {% set at_purge_position = tpos.x == pvars.purge_pos_x and tpos.y == pvars.purge_pos_y%}
  {% set docked = at_purge_position and deployed %}
  {% if not homed %}
    RESPOND TYPE=echo MSG="PURGINATOR_DOCK: Printer not homed. Triggered X Y Homing."
    G28 X Y
    RESPOND TYPE=echo MSG="PURGINATOR_DOCK: Toolhead docked."
  {% else %} 
    {% if not docked %}
      {% if not at_purge_position %}
        SET_VELOCITY_LIMIT ACCEL={pvars.travel_acceleration}
        _purginator_retract
        G1 X{pvars.purge_pos_x} Y{pvars.purge_pos_y} F{pvars.travel_speed|float}
      {% endif %}
      _purginator_deploy
      _purginator_wiggle
      RESPOND TYPE=echo MSG="PURGINATOR_DOCK: Toolhead docked."  
    {% else %}
      RESPOND TYPE=echo MSG="PURGINATOR_DOCK: Command ignored, toolhead already docked."  
    {% endif %}
  {% endif %}
  RESTORE_GCODE_STATE NAME=puginator_dock



[gcode_macro PURGINATOR_UNDOCK]
description: Undock the toolhead from the purginator
gcode:
  SAVE_GCODE_STATE NAME=puginator_undock
  {% set pvars = printer['gcode_macro _PURGINATOR_VARS'] %}
  {% set homed = "xy" in printer.toolhead.homed_axes %}
  {% set gpos = printer.gcode_move.gcode_position %}
  {% set tpos = printer.toolhead.position %}
  {% set retractor_base = pvars.retractor_servo_minimum_pulse_width * 50 %}
  {% set retractor_width = pvars.retractor_servo_maximum_pulse_width * 50 - pvars.retractor_servo_minimum_pulse_width * 50 %}
  {% set retractor_increment = retractor_width / pvars.retractor_servo_maximum_angle %}
  {% set retractor_servo_pos = printer["servo retractor"].value %} 
  {% set retractor_servo_angle = ((retractor_servo_pos-retractor_base)/retractor_increment)|round(0)|int %}
  {% set elevator_base = pvars.elevator_servo_minimum_pulse_width * 50 %}
  {% set elevator_width = pvars.elevator_servo_maximum_pulse_width * 50 - pvars.elevator_servo_minimum_pulse_width * 50 %}
  {% set elevator_increment = elevator_width / pvars.elevator_servo_maximum_angle %}
  {% set elevator_servo_pos = printer["servo elevator"].value %} 
  {% set elevator_servo_angle = ((elevator_servo_pos-elevator_base)/elevator_increment)|round(0)|int %}
  {% set deployed = elevator_servo_angle == pvars.elevator_servo_angle_up and retractor_servo_angle == pvars.retractor_servo_angle_deployed %}
  {% set at_purge_position = tpos.x == pvars.purge_pos_x and tpos.y == pvars.purge_pos_y%}
  {% set docked = at_purge_position and deployed %}
  {% if deployed %}
      _purginator_retract
      RESPOND TYPE=echo MSG="PURGINATOR_UNDOCK: Toolhead undocked."   
  {% else  %}
      RESPOND TYPE=echo MSG="PURGINATOR_UNDOCK: Command ignored. Toolhead not docked." 
  {% endif %}

  
[gcode_macro PURGINATOR_AWAY]
description: Undock and move the toolhead to rear right corner at default height or current z height if higher.
description: For easy access to purginator hardware and nozzle as well as fast subsequent homing.
variable_default_hight_factor: 0.4 # multiplies max height for default heigth 
gcode: 
  {% set pvars = printer['gcode_macro _PURGINATOR_VARS'] %}
  {% set maxpos = printer.toolhead.axis_maximum %}
  {% set tpos = printer.toolhead.position %}
  {% set away_x = maxpos.x - 5 %} 
  {% set away_y = maxpos.y - 5 %}
  {% set away_z = [maxpos.z * default_hight_factor, tpos.z]|max %}
  {% if "xy" not in printer.toolhead.homed_axes %}
    G28 X Y
    RESPOND TYPE=echo MSG="PURGINATOR_AWAY: Automatically homing X Y."
  {% endif %}
  PURGINATOR_UNDOCK
  G1 X{away_x} Y{away_y}  F{pvars.travel_speed|float}
  {% if "z" in printer.toolhead.homed_axes %}
    G1 Z{away_z} F{pvars.travel_speed_z|float}
  {% else %}
    RESPOND TYPE=echo MSG="PURGINATOR_AWAY: Skipped Z move because Z not homed."
  {% endif %}
    

[gcode_macro _purginator_deploy]
description: Servo move sequence to deploy the purginator
gcode:
  {% set pvars = printer['gcode_macro _PURGINATOR_VARS'] %}
  {% set retractor_base = pvars.retractor_servo_minimum_pulse_width * 50 %}
  {% set retractor_width = pvars.retractor_servo_maximum_pulse_width * 50 - pvars.retractor_servo_minimum_pulse_width * 50 %}
  {% set retractor_increment = retractor_width / pvars.retractor_servo_maximum_angle %}
  {% set retractor_servo_pos = printer["servo retractor"].value %} 
  {% set retractor_servo_angle = ((retractor_servo_pos-retractor_base)/retractor_increment)|round(0)|int %}
  {% set elevator_base = pvars.elevator_servo_minimum_pulse_width * 50 %}
  {% set elevator_width = pvars.elevator_servo_maximum_pulse_width * 50 - pvars.elevator_servo_minimum_pulse_width * 50 %}
  {% set elevator_increment = elevator_width / pvars.elevator_servo_maximum_angle %}
  {% set elevator_servo_pos = printer["servo elevator"].value %} 
  {% set elevator_servo_angle = ((elevator_servo_pos-elevator_base)/elevator_increment)|round(0)|int %}
  {% set deployed = elevator_servo_angle == pvars.elevator_servo_angle_up and retractor_servo_angle == pvars.retractor_servo_angle_deployed %}
  {% if not deployed %}
    SET_SERVO SERVO=elevator ANGLE={pvars.elevator_servo_angle_down}
    G4 P{pvars.elevator_servo_travel_time}
    SET_SERVO SERVO=retractor ANGLE={pvars.retractor_servo_angle_deployed}
    G4 P{pvars.retractor_servo_travel_time_deploy}
    SET_SERVO SERVO=elevator ANGLE={pvars.elevator_servo_angle_up}
    G4 P{pvars.elevator_servo_travel_time}
  {% endif %}

  
[gcode_macro _purginator_retract]
description: Servo move sequence to retract the purginator and eject purged filament
gcode:
  {% set pvars = printer['gcode_macro _PURGINATOR_VARS'] %}
  {% set retractor_base = pvars.retractor_servo_minimum_pulse_width * 50 %}
  {% set retractor_width = pvars.retractor_servo_maximum_pulse_width * 50 - pvars.retractor_servo_minimum_pulse_width * 50 %}
  {% set retractor_increment = retractor_width / pvars.retractor_servo_maximum_angle %}
  {% set retractor_servo_pos = printer["servo retractor"].value %} 
  {% set retractor_servo_angle = ((retractor_servo_pos-retractor_base)/retractor_increment)|round(0)|int %}
  {% set elevator_base = pvars.elevator_servo_minimum_pulse_width * 50 %}
  {% set elevator_width = pvars.elevator_servo_maximum_pulse_width * 50 - pvars.elevator_servo_minimum_pulse_width * 50 %}
  {% set elevator_increment = elevator_width / pvars.elevator_servo_maximum_angle %}
  {% set elevator_servo_pos = printer["servo elevator"].value %} 
  {% set elevator_servo_angle = ((elevator_servo_pos-elevator_base)/elevator_increment)|round(0)|int %}
  {% set retractor_servo_angle_neutral = (pvars.retractor_servo_angle_retracted+pvars.retractor_servo_angle_deployed)/2%}
  {% set retracted = elevator_servo_angle == pvars.elevator_servo_angle_up and retractor_servo_angle == retractor_servo_angle_neutral %}
  {% if not retracted %}
    SET_SERVO SERVO=elevator ANGLE={pvars.elevator_servo_angle_down}
    G4 P{pvars.elevator_servo_travel_time}
    SET_SERVO SERVO=retractor ANGLE={pvars.retractor_servo_angle_retracted}
    G4 P{pvars.retractor_servo_travel_time_retract/2|int}
    SET_SERVO SERVO=elevator ANGLE={pvars.elevator_servo_angle_up}
    G4 P{pvars.retractor_servo_travel_time_retract/2|int}
    SET_SERVO SERVO=retractor ANGLE={(pvars.retractor_servo_angle_retracted+pvars.retractor_servo_angle_deployed)/2}
  {% endif %}


[gcode_macro _purginator_wiggle]
description: Toolhead move sequence to wiggle in the nozzle to the purge hole
variable_offset_x: 0.5
variable_offset_y: 0.5
gcode:
  {% set pvars = printer['gcode_macro _PURGINATOR_VARS'] %}
  {% set maxpos = printer.toolhead.axis_maximum %}
  G1 X{pvars.purge_pos_x} Y{[pvars.purge_pos_y + offset_y, maxpos.y]|min} F{pvars.travel_speed|float}
  G1 X{pvars.purge_pos_x + offset_x} Y{pvars.purge_pos_y-offset_y} F{pvars.travel_speed|float}
  G1 X{pvars.purge_pos_x - offset_x} Y{pvars.purge_pos_y-offset_y} F{pvars.travel_speed|float}
  G1 X{pvars.purge_pos_x} Y{[pvars.purge_pos_y + offset_y, maxpos.y]|min} F{pvars.travel_speed|float}
  G1 X{pvars.purge_pos_x} Y{pvars.purge_pos_y - offset_y} F{pvars.travel_speed|float}
  G1 X{pvars.purge_pos_x - offset_x} Y{[pvars.purge_pos_y + offset_y, maxpos.y]|min} F{pvars.travel_speed|float}
  G1 X{pvars.purge_pos_x + offset_x} Y{[pvars.purge_pos_y + offset_y, maxpos.y]|min} F{pvars.travel_speed|float}
  G1 X{pvars.purge_pos_x} Y{pvars.purge_pos_y - offset_y} F{pvars.travel_speed|float}
  G1 X{pvars.purge_pos_x} Y{[pvars.purge_pos_y + offset_y, maxpos.y]|min} F{pvars.travel_speed|float}
  G1 X{pvars.purge_pos_x} Y{pvars.purge_pos_y} F{pvars.travel_speed|float}
  G1 X{pvars.purge_pos_x + offset_x} Y{pvars.purge_pos_y} F{pvars.travel_speed|float}
  G1 X{pvars.purge_pos_x - offset_x} Y{pvars.purge_pos_y} F{pvars.travel_speed|float}
  G1 X{pvars.purge_pos_x} Y{pvars.purge_pos_y} F{pvars.travel_speed|float}



[gcode_macro PURGINATOR_PURGE]
description: Purges the amount of filament requested by parameters 'L' for length in mm or 'V' for volume in mm^3.
description: If requested volume exceeds the maximum purge volume configured in purginator_vars.cfg multiple consecutive purges will be carried out.
description: Falls back to default purge volume if no parameters are provided.
gcode:
  SAVE_GCODE_STATE NAME=_purginator_purge
  {% set pvars = printer['gcode_macro _PURGINATOR_VARS'] %}
  {% set filament_diameter = printer.configfile.config.extruder.filament_diameter|float %}
  {% set filament_cross_section = (filament_diameter/2) ** 2 * 3.1415 %}
  {% set requested_volume = pvars.default_purge_volume %}
  {% if params.V %}
    {% set requested_volume = params.V|float %}
  {% elif params.L %}
    {% set requested_volume = params.L|float*filament_cross_section|float %}
  {% endif %}
  {% set purges = (requested_volume/pvars.maximum_purge_volume)|int + 1 %}
  {% set purge_volume = requested_volume/purges %}
  {% set purge_length = purge_volume/filament_cross_section|float|round(2) %}
  {% set fast_length = [purge_length-pvars.slow_purge_volume/filament_cross_section,0]|max|float|round(2) %}
  {% set fast_speed = pvars.fast_purge_speed*60|float|round(2) %}
  {% set slow_length = [purge_length, pvars.slow_purge_volume/filament_cross_section]|min|float|round(2) %}
  {% set slow_speed = pvars.slow_purge_speed*60|float|round(2) %}
  {% set target_temp = printer.extruder.target|float %}
  {% set retractor_base = pvars.retractor_servo_minimum_pulse_width * 50 %}
  {% set retractor_width = pvars.retractor_servo_maximum_pulse_width * 50 - pvars.retractor_servo_minimum_pulse_width * 50 %}
  {% set retractor_increment = retractor_width / pvars.retractor_servo_maximum_angle %}
  {% set retractor_servo_pos = printer["servo retractor"].value %} 
  {% set retractor_servo_angle = ((retractor_servo_pos-retractor_base)/retractor_increment)|round(0)|int %}
  {% set elevator_base = pvars.elevator_servo_minimum_pulse_width * 50 %}
  {% set elevator_width = pvars.elevator_servo_maximum_pulse_width * 50 - pvars.elevator_servo_minimum_pulse_width * 50 %}
  {% set elevator_increment = elevator_width / pvars.elevator_servo_maximum_angle %}
  {% set elevator_servo_pos = printer["servo elevator"].value %} 
  {% set elevator_servo_angle = ((elevator_servo_pos-elevator_base)/elevator_increment)|round(0)|int %}
  {% set deployed = elevator_servo_angle == pvars.elevator_servo_angle_up and retractor_servo_angle == pvars.retractor_servo_angle_deployed %}
  {% set retracted = elevator_servo_angle == pvars.elevator_servo_angle_up and retractor_servo_angle == retractor_servo_angle_neutral %}
  {% set filament_retract_speed = pvars.retract_after_purge_speed*60|float|round(2) %}
   ## Home XY if necessary
  {% if "xy" not in printer.toolhead.homed_axes %}
  G28 X Y
  {% endif %}
  ## adjust nozzle temp setting if necessary
  {% if target_temp < pvars.minimum_purge_temp %}
    RESPOND TYPE=error MSG="PURGINATOR_PURGE: Nozzle temperature too low. Heating to "{pvars.minimum_purge_temp}"°C."
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={pvars.minimum_purge_temp}
  {% endif %}
  TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={pvars.minimum_purge_temp-1}
  ## Execute Purge(s)
  EXCARVATOR_ON
  {% if purges > 1 %} 
    RESPOND TYPE=echo MSG="PURGINATOR_PURGE: Purge volume exceeds maximum and is split into "{purges}" purges."
  {% endif %}     
  mmu_sync_gear_motor
  M83
  {% for purge in range(0, purges) %}
    purginator_dock
    RESPOND TYPE=echo MSG="PURGINATOR_PURGE: Purge sequence "{purge+1}" of "{purges}
    {% if purge > 0 %} 
      RESPOND TYPE=echo MSG="PURGINATOR_PURGE: Unretract "{pvars.retract_after_purge}"mm of filament at "{filament_retract_speed}"mm/min."
      G1 E{pvars.retract_after_purge} F{filament_retract_speed}
    {% endif %}
    RESPOND TYPE=echo MSG="PURGINATOR_PURGE: Purging "{fast_length}"mm of filament at "{fast_speed}"mm/min."
    G1 E{fast_length} F{fast_speed}
    RESPOND TYPE=echo MSG="PURGINATOR_PURGE: Purging "{slow_length}"mm of filament at "{slow_speed}"mm/min."
    G1 E{slow_length} F{slow_speed}
    RESPOND TYPE=echo MSG="PURGINATOR_PURGE: Dwell "{pvars.dwell_after_purge}"ms."
    G4 P{pvars.dwell_after_purge} # dwell after purge
    RESPOND TYPE=echo MSG="PURGINATOR_PURGE: Retract "{-pvars.retract_after_purge}"mm of filament at "{filament_retract_speed}"mm/min."
    G1 E{-pvars.retract_after_purge} F{filament_retract_speed}
    RESPOND TYPE=echo MSG="PURGINATOR_PURGE: Dwell "{pvars.dwell_after_retract}"ms."
    G4 P{pvars.dwell_after_retract} # dwell after retract
    purginator_undock
  {% endfor %}
  SET_GCODE_VARIABLE MACRO=PURGINATOR_VARS VARIABLE=accumulated_retraction_length VALUE={pvars.retract_after_purge}
  EXCARVATOR_OFF
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={target_temp}
  RESTORE_GCODE_STATE NAME=_purginator_purge

  
[gcode_macro PURGINATOR_BRUSH]
description: Brushes the nozzle and returns the toolhead to origin.
description: WIPES: Number of wipes passes in x direction.
description: ZIGZAGS: Number zigzag moves in y direction during one wipe
description: STAY=1 ... Leave toolhead at brushing endposition instead of returning. Useful for executing different consecutive brush patterns in a macro.
description: DOCK=1 ... Dock the toolhead after brushing instead of returning.
gcode:
  SAVE_GCODE_STATE NAME=purginator_brush
  {% set pvars = printer['gcode_macro _PURGINATOR_VARS'] %}
  {% set gpos = printer.gcode_move.gcode_position %}
  {% set tpos = printer.toolhead.position %}
  {% set wipes = params.WIPES|default(pvars.default_wipes)|int %}
  {% set zigzags = params.ZIGZAGS|default(pvars.default_zigzags)|int %}
  {% set brush_width = pvars.brush_end - pvars.brush_start %}
  {% set brush_depth = printer.configfile.config["stepper_y"]["position_max"]|float - pvars.brush_front - 0.5 %}
  {% set homed = "xy" in printer.toolhead.homed_axes %}
  {% set docked = (printer.toolhead.position.x == pvars.purge_pos_x and printer.toolhead.position.y == pvars.purge_pos_y) or not homed %}
  {% set stay_after_brushing = params.STAY|default(0)|int == 1 %}
  {% set dock_after_brushing = params.DOCK|default(0)|int == 1 %}
  {% set fanspeed = printer["fan"].speed * 255|int %}
  ## Home XY if necessary
  {% if "xy" not in printer.toolhead.homed_axes %}
  G28 X Y
  {% endif %}
  ## Save Gcode State
  SAVE_GCODE_STATE NAME=purginator_brush
  ## Set fan to maximum
  M106 S255
  ## Undock if necessary 
  {% if docked %}
    PURGINATOR_UNDOCK
  {% endif %}
  ## Determine Starting Direction
  {% if printer.toolhead.position.x < pvars.brush_start+brush_width/2 %}
    {% set direction = 1 %}
  {% else %}
    {% set direction = -1 %}
  {% endif %}  
  ## Move to brush
  SET_VELOCITY_LIMIT ACCEL={pvars.travel_acceleration|float}
  {% if direction == 1 %}
    G1 X{pvars.brush_start-pvars.brush_margin} Y{pvars.brush_front+(brush_depth/2)} F{pvars.travel_speed}    
  {% else %}
    G1 X{pvars.brush_start+brush_width+pvars.brush_margin} Y{pvars.brush_front+(brush_depth/2)} F{pvars.travel_speed}
  {% endif %}
  ## Perform Wipes
  SET_VELOCITY_LIMIT ACCEL={pvars.brush_acceleration|float}
  {% for wipe in range(0, (wipes)) %}
    {% if (direction == 1 and wipe%2 == 0) or (direction != 1 and wipe%2 != 0) %}
      G1 X{pvars.brush_start-pvars.brush_margin} Y{pvars.brush_front+(brush_depth/2)} F{pvars.brush_speed}      
      {% if zigzags != 0 %}
        {% for zigzag in range(0, (zigzags+1)) %}
          {% if zigzag%2 == 0 %}
            {% set y =  pvars.brush_front%}
          {% else %}
            {% set y = pvars.brush_front+brush_depth %}
          {% endif %}  
          {% set x = pvars.brush_start+(brush_width/zigzags)*(zigzag) %}
          G1 X{x} Y{y} F{pvars.brush_speed}
        {% endfor %}
      {% endif %}
      G1 X{pvars.brush_start+brush_width+pvars.brush_margin} Y{pvars.brush_front+(brush_depth/2)} F{pvars.brush_speed}
    {% else %}
      G1 X{pvars.brush_start+brush_width+pvars.brush_margin} Y{pvars.brush_front+(brush_depth/2)} F{pvars.brush_speed}
      {% if zigzags != 0 %}
        {% for zigzag in range(0, (zigzags+1)) %}
          {% if zigzag%2 == 0 %}
            {% if zigzags%2 == 0 %}
              {% set y = pvars.brush_front+brush_depth %}
            {% else %}
              {% set y =  pvars.brush_front%}
            {% endif %}  
          {% else %}
            {% if zigzags%2 == 0 %}
              {% set y =  pvars.brush_front%}
            {% else %} 
              {% set y = pvars.brush_front+brush_depth %}
            {% endif %}   
          {% endif %}  
          {% set x = pvars.brush_start+brush_width-brush_width/zigzags*zigzag %}
          G1 X{x} Y{y} F{pvars.brush_speed}
        {% endfor %}        
      {% endif %} 
      G1 X{pvars.brush_start-pvars.brush_margin} Y{pvars.brush_front+(brush_depth/2)} F{pvars.brush_speed}
    {% endif %} 
  {% endfor %}
  SET_VELOCITY_LIMIT ACCEL={pvars.travel_acceleration|float}
  ## Set fanspeed to original setting
  M106 S{fanspeed}
  ## Return or stay
  {% if not stay_after_brushing and homed and not dock_after_brushing %}
    G1 X{tpos.x} Y{tpos.y} F{pvars.travel_speed}
  {% endif %}
  ## Dock if toolhead was docked before or docking is requested by parameter
  {% if (docked  and not stay_after_brushing) or dock_after_brushing %}
    PURGINATOR_DOCK
  {% endif %}  
  RESTORE_GCODE_STATE NAME=purginator_brush


[gcode_macro PURGINATOR_NOZZLE_COOLDOWN]
description: Repeatedly brushes the nozzle until a given temperature is reached. This will keep the nozzle clean and make cooldown faster.
description: Add for example purginator_NOZZLE_COOLDOWN TEMP=100 in your print_end macro to have a perfectly clean nozzle for the next print.
gcode:
  {% set pvars = printer['gcode_macro _PURGINATOR_VARS'] %}
  {% set COOLDOWN_TEMP = params.TEMP|default(pvars.default_cooldown_temp)|int %}
  {% set TARGET_TEMP = printer.extruder.target %}
  {% set fan_speed = printer["fan"].speed * 255|int %}
  {% set min_wipes = params.MIN|default(pvars.default_min_wipes)|int %}
  {% if COOLDOWN_TEMP < TARGET_TEMP %}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={COOLDOWN_TEMP}
  {% endif %}
  M106 S255 # Turn fan to maximum
  {% for wipe in range(0, 50) %}
    {% if wipe < min_wipes %}
    _purginator_twipe TARGET=0
    {% else %}
    _purginator_twipe TARGET={COOLDOWN_TEMP}
    {% endif %}
  {% endfor %}
  M106 S{fan_speed} # Set fan back to original setting

    
[gcode_macro _purginator_twipe]
description: Subroutine of the purginator_NOZZLE_COOLDOWN macro.
description: Performs a sequence of wipes if the nozzle temperature is above target temp.
gcode:
  {% set ACTUAL_TEMP = printer.extruder.temperature %}
  {% set TARGET_TEMP = params.TARGET %}
  {% if ACTUAL_TEMP|float > TARGET_TEMP|float +1 %}
    purginator_brush WIPES=4 ZIGZAGS=1 STAY=1
    purginator_brush WIPES=1 ZIGZAGS=40 STAY=1
    purginator_brush WIPES=4 ZIGZAGS=1 STAY=1
    purginator_brush WIPES=1 ZIGZAGS=40 STAY=1
    purginator_brush WIPES=4 ZIGZAGS=1 STAY=1
    purginator_brush WIPES=3 ZIGZAGS=0 DOCK=1
    G4 P2000 # 2 sec delay before next twipe
  {% endif %}


[gcode_macro EXCARVATOR_ON]
description: Turn on the excarvator screw conveyor
gcode:
  {% set pvars = printer['gcode_macro _PURGINATOR_VARS'] %}
  SET_SERVO SERVO=excarvator ANGLE={pvars.excarvator_servo_angle_on}


[gcode_macro EXCARVATOR_OFF]
description: Turn off the excarvator screw conveyor
gcode:
  {% set pvars = printer['gcode_macro _PURGINATOR_VARS'] %}
  #SET_SERVO SERVO=excarvator ANGLE={pvars.excarvator_servo_angle_off}
  SET_SERVO SERVO=excarvator WIDTH=0
