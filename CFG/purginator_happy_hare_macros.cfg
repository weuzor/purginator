[gcode_macro PURGINATOR_PARK]
description: Move from print to purge position
gcode:
  {% set pvars = printer['gcode_macro _PURGINATOR_VARS'] %}
  {% set gpos = printer.gcode_move.gcode_position %}
  {% set maxpos = printer.toolhead.axis_maximum %}
  {% set printing = printer.mmu.print_state == 'printing' %}
  {% set at_purge_position = gpos.x == pvars.purge_pos_x and gpos.y == pvars.purge_pos_y%}
  {% set brush_depth = printer.configfile.config["stepper_y"]["position_max"]|float - pvars.brush_front - 0.5 %}
  SAVE_GCODE_STATE NAME=puginator_park
  SET_VELOCITY_LIMIT ACCEL={pvars.travel_acceleration}
  {% if not at_purge_position %}
    _purginator_retract
    {% if not return_pos_stored and printing %}
      ## Store return_pos for later 
      SET_GCODE_VARIABLE MACRO=_PURGINATOR_VARS VARIABLE=return_pos VALUE="{gpos.x}, {gpos.y}, {gpos.z}"
      SET_GCODE_VARIABLE MACRO=_PURGINATOR_VARS VARIABLE=return_pos_stored VALUE=True
      ## Calculate waypoints and retract distances
      {% set travel_z = [gpos.z + pvars.z_hop_on_park, maxpos.z]|min|float %}
      {% set dx = pvars.brush_end + pvars.brush_margin - gpos.x %}
      {% set dy = pvars.brush_front+(brush_depth * 0.5) - gpos.y %}
      {% set len = (dx**2 + dy**2)**0.5 %}
      {% set wipe_x = [[gpos.x - dx / len * pvars.wipe_length, maxpos.x]|min, 0]|max %}
      {% set wipe_y = [[gpos.y - dy / len * pvars.wipe_length, maxpos.y]|min, 0]|max %}
      {% set wipe_z = gpos.z %}
      {% set wipe_retract = pvars.wipe_length/pvars.travel_speed*pvars.wipe_retract_speed * 60 %}
      {% set ascend_x = [[wipe_x+dx/len*pvars.ascend_length, maxpos.x]|min, 0]|max %}
      {% set ascend_y = [[wipe_y+dy/len*pvars.ascend_length, maxpos.y]|min, 0]|max %}
      {% set ascend_z = travel_z %}
      {% set ascend_retract = pvars.ascend_length/pvars.travel_speed*pvars.travel_retract_speed * 60 %}
      {% set brush_x = pvars.brush_end + pvars.brush_margin %}
      {% set brush_y = pvars.brush_front+(brush_depth * 0.5) %}
      {% set brush_z = travel_z %}
      {% set bdist = ((brush_x - ascend_x)**2 + (brush_y - ascend_y)**2)**0.5 %}
      {% set brush_retract = [bdist/pvars.travel_speed*pvars.travel_retract_speed*60, pvars.retract_length-wipe_retract-ascend_retract]|min %}
      {% set purge_x = pvars.purge_pos_x %}
      {% set purge_y = pvars.purge_pos_y %}
      {% set purge_z = travel_z %}
      {% set pdist = ((purge_x - brush_x)**2 + (purge_y - brush_y)**2)**0.5 %}
      {% set purge_retract = [pdist/pvars.travel_speed*pvars.travel_retract_speed*60, pvars.retract_length-wipe_retract-ascend_retract-brush_retract]|min %}
      ## Carry out anti stringing move and travel via the brush to purge position 
      MMU_SYNC_GEAR_MOTOR
      M83
      G4 P{pvars.dwell_before_retract} # Dwell
      G1 E-{pvars.initial_retract_length} F{pvars.initial_retract_speed*60} # Retract
      G1 X{wipe_x}   Y{wipe_y}   Z{wipe_z}   E-{wipe_retract}   F{pvars.travel_speed} # Wipe
      G1 X{ascend_x} Y{ascend_y} Z{ascend_z} E-{ascend_retract} F{pvars.travel_speed} # Ascend
      G1 X{brush_x} Y{brush_y} Z{brush_z} E-{brush_retract} F{pvars.travel_speed} # Travel to brush start rh of brush
      G1 X{purge_x} Y{purge_y} Z{purge_z} E-{purge_retract} F{pvars.travel_speed} # Travel to purge pos
      ## Store accumulated retract length
      SET_GCODE_VARIABLE MACRO=_PURGINATOR_VARS VARIABLE=accumulated_retraction_length VALUE={(pvars.initial_retract_length + wipe_retract + ascend_retract + brush_retract + purge_retract)|round(2)}
      RESPOND TYPE=echo MSG="Accumulated retraction during park move: "{(pvars.initial_retract_length + wipe_retract + ascend_retract + brush_retract + purge_retract)|round(2)}
    {% else %}
      ## Move without z hop or retraction
      G1 X{pvars.purge_pos_x} Y{pvars.purge_pos_y} F{pvars.travel_speed|float}
      {% endif %}
  {% endif %}
  purginator_dock
  RESTORE_GCODE_STATE NAME=puginator_park
  EXTRACTOR_ON


[gcode_macro PURGINATOR_CUT]
description: Cut the filament by pressing the Filametrix Mod lever.
gcode:
  {% set pvars = printer['gcode_macro _PURGINATOR_VARS'] %}
  {% set retract_length = pvars['retract_length']|float %}
  {% set simple_tip_forming = pvars['simple_tip_forming']|default(true)|lower == 'true' %}
  {% set pushback_length = pvars['pushback_length']|float %}
  {% set pushback_dwell_time = pvars['pushback_dwell_time']|int %}
  {% set extruder_move_speed = pvars['extruder_move_speed']|float %}
  {% set rip_speed = pvars['rip_speed']|float %}
  {% set rip_length = pvars['rip_length']|float %}
  {% set cut_dwell_time = pvars['cut_dwell_time']|float %}
  {% set target_temp = printer.extruder.target %}
  ## Home X Y if necessary
  {% if "xy" not in printer.toolhead.homed_axes %}
    G28 X Y
  {% endif %}
  SAVE_GCODE_STATE NAME=PURGINATOR_CUT
  PURGINATOR_DOCK
  SET_PRESSURE_ADVANCE ADVANCE=0 # Temporarily disable pressure advance. Happy Hare will restore it
  ## Adjust Nozzle Temperature setting if necessary
  {% if target_temp < pvars.minimum_purge_temp %}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={pvars.minimum_purge_temp}
    TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={pvars.minimum_purge_temp-1}
  {% endif %}
  M83 # Relative extrusion
  G92 E0
  ## Prepare and position Filament for cutting acc. Happy Hare _MMU_CUT_TIP_VARS
  {% if retract_length > 0 %}
    # Retract to save filament waste, repeat to allow some cooling
    G1 E-{retract_length-pvars.accumulated_retraction_length} F{extruder_move_speed * 60}
    SET_GCODE_VARIABLE MACRO=_PURGINATOR_VARS VARIABLE=accumulated_retraction_length VALUE=0
    {% if simple_tip_forming %}
      G1 E{retract_length / 2} F{extruder_move_speed * 60}
      G1 E-{retract_length / 2} F{extruder_move_speed * 60}
    {% endif %}
  {% endif %}
  ## Extend the depressor to push the filametrix cutting lever
  SET_SERVO SERVO=depressor ANGLE={pvars.depressor_servo_angle_deployed}
  G4 P{pvars.depressor_servo_travel_time} # wait for servo travel
  RESPOND TYPE=echo MSG="Filament has been cut."
  ## Retract filament to free the cutter blade
  G4 P{cut_dwell_time}
  {% if rip_length > 0 %}
    G1 E-{rip_length} F{rip_speed * 60}
  {% endif %}
  ## Retract depressor arm
  SET_SERVO SERVO=depressor ANGLE={pvars.depressor_servo_angle_retracted}
  G4 P{pvars.depressor_servo_travel_time} # wait for servo travel
  ## Optionally pushback of the tip residual into the hotend to avoid future catching
  {% if pushback_length > 0 %} 
    G1 E{pushback_length} F{extruder_move_speed * 60}
    G4 P{pushback_dwell_time}
    G1 E-{pushback_length} F{extruder_move_speed * 60}
  {% endif %}
  ## Nozzle Temp back to original setting
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={target_temp}
  ## Restore Gcode state
  RESTORE_GCODE_STATE NAME=PURGINATOR_CUT


[gcode_macro PURGINATOR_RETURN]
description: Purge/prime nozzle and return to print.
gcode:
  ## Save gcode state
  SAVE_GCODE_STATE NAME=puginator_return
  {% set pvars = printer['gcode_macro _PURGINATOR_VARS'] %}
  {% set park_vars = printer['gcode_macro _MMU_PARK'] %}
  {% set printing = printer.mmu.print_state == 'printing' %}
  {% set gpos = printer.gcode_move.gcode_position %}
  {% set maxpos = printer.toolhead.axis_maximum %}
  {% set return_pos_x,return_pos_y,return_pos_z = pvars.return_pos|map('float') %}
  {% set nx,ny = park_vars.next_xy|map('float') %} 
  {% set filament_diameter = printer.configfile.config.extruder.filament_diameter|float %}
  {% set filament_cross_section = (filament_diameter/2) ** 2 * 3.1416 %}
  {% set homed = "xy" in printer.toolhead.homed_axes %}
  {% set from_tool = printer.mmu.last_tool %}
  {% set to_tool = printer.mmu.tool %}
  {% set pv = printer.mmu.slicer_tool_map.purge_volumes %}
  {% set tip_residual_volume = pvars.remaining_tip_length*filament_cross_section|float %}
  ## Determine purge volume
  {% if from_tool == to_tool and to_tool >= 0 %} ## No toolchange occurred
    {% set purge_volume = pvars.minimum_purge_volume %}
    RESPOND TYPE=echo MSG="No toolchange, purging  minimum. V= "{purge_volume}" mm^3"
  {% else %} ## Toolchange occurred
    {% if pv %} ## purge volume table available
      {% if from_tool < 0 and to_tool >= 0 %} ## toolchange from unknown tool to known tool
        {% set purge_volume = [pv|map(attribute=to_tool)|max * pvars.slicer_volumes_factor + tip_residual_volume, pvars.minimum_purge_volume]|max|round(2) %}  
        RESPOND TYPE=echo MSG="Toolchange from unknown tool to T"{to_tool}". V= "{purge_volume}" mm^3"
      {% elif to_tool < 0 %} ## toolchange to unknown tool        
        {% set purge_volume = [pv|map('max')|max * pvars.slicer_volumes_factor + tip_residual_volume, pvars.minimum_purge_volume]|max|round(2) %}
        RESPOND TYPE=echo MSG="Toolchange to unknown tool. V= "{purge_volume}" mm^3"
      {% else %} ## toolchange from known tool to known tool        
        {% set purge_volume = [pv[from_tool][to_tool]|float * pvars.slicer_volumes_factor + tip_residual_volume, pvars.minimum_purge_volume]|max|round(2) %}
        RESPOND TYPE=echo MSG="Toolchange from T"{from_tool}" to T"{to_tool}". V= "{purge_volume}" mm^3"
      {% endif %}
    {% else %} ## purge volume table not available
      {% set purge_volume = pvars.default_purge_volume|float %}
      RESPOND TYPE=echo MSG="No purge volume tabe found, using default. V= "{purge_volume}" mm^3"
    {% endif %}
  {% endif %}
  ## Purge
  PURGINATOR_PURGE V={purge_volume}
  ## Return to print
  M83 ; relative extrusion
  MMU_SYNC_GEAR_MOTOR
  SET_VELOCITY_LIMIT ACCEL={pvars.travel_acceleration}
  {% if pvars.return_pos_stored %}
    {% if nx  and ny %}
      {% set dest_x = nx %}
      {% set dest_y = ny %}
    {% else %}
      {% set dest_x = return_pos_x %}
      {% set dest_y = return_pos_y %}
    {% endif %}
    {% set travel_z = [return_pos_z + pvars.z_hop_on_park, maxpos.z]|min %}
    {% set dest_z = return_pos_z %}
    {% set dx = dest_x - gpos.x %}
    {% set dy = dest_y - gpos.x %}
    {% set dist = (dx**2 + dy**2)**0.5 %}
    {% set travel_retract = dist / pvars.travel_speed * pvars.return_retract_speed * 60%}
    {% set unretract = (travel_retract + pvars.accumulated_retraction_length + pvars.unretract_addendum)%}
    G1 X{dest_x} Y{dest_y} Z{travel_z} E-{travel_retract} F{pvars.travel_speed} # Travel with retraction
    G1 Z{dest_z} F{pvars.travel_speed} # Descend
    G1 E{unretract+pvars.unretract_addendum} F{pvars.unretract_speed*60} # unretract
  {% else %}
    G1 E{pvars.accumulated_retraction_length+pvars.unretract_addendum} F{pvars.unretract_speed*60} # unretract
  {% endif %}
  SET_GCODE_VARIABLE MACRO=_PURGINATOR_VARS VARIABLE=accumulated_retraction_length VALUE=0
  SET_GCODE_VARIABLE MACRO=_PURGINATOR_VARS VARIABLE=return_pos_stored VALUE=False
  RESTORE_GCODE_STATE NAME=puginator_return
